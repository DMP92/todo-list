{"version":3,"sources":["webpack://todo-list/./src/editTasks.js","webpack://todo-list/./src/grabTask.js","webpack://todo-list/./src/index.js","webpack://todo-list/./src/printTasks.js","webpack://todo-list/./src/project.js","webpack://todo-list/./src/taskFactory.js","webpack://todo-list/./src/updateDOM.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACgC;AAC7B;AACJ;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,yDAAkB;;AAE1C;AACA,QAAQ,mEAAuB;AAC/B,QAAQ,qDAAc;AACtB,sC;AACA,QAAQ,wDAAe,e;AACvB;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,yDAAkB;;AAExC,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,uDAAc;;AAEpC,uBAAuB,kBAAkB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,2CAA2C;AAC3C;;AAEA;AACA;AACA,gCAAgC,KAAK;AACrC,K;;AAEA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA,gBAAgB,qDAAc;AAC9B;AACA,gEAAgE;AAChE;AACA;AACA,0CAA0C,OAAO;AACjD;AACA,gBAAgB,qDAAc;AAC9B;AACA,gEAAgE;AAChE;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA,gBAAgB,qDAAc;AAC9B;AACA;AACA;AACA,K;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO,KAAK,WAAW,MAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,QAAQ;AACtH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA,uBAAuB,6BAA6B;AACpD;;AAEA;AACA,aAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D;AAC5D;AACA;;;AAGA;AACA;AACA;AACA,yDAAyD;AACzD;;;AAGA;AACA;AACA;AACA,8DAA8D,cAAc,oBAAoB;AAChG;AACA;;;;AAIA;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,6DAAiB;AAC7B;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,8DAA8D,QAAQ;AACtE,kCAAkC,QAAQ;AAC1C;AACA,iBAAiB;AACjB;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY,qDAAc;AAC1B;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,kBAAkB;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;;;;;;;;;;;;;;;;;;AC3duC;AACmB;AACvB;AACxC;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA,0B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,+DAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,4DAAW;AACnD;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEkB;;;;;;;;;;;;;;;;;;;;;;;AChIyB;AACT;AACG;AACc;AACE;AACb;AACE;AACN;AACA;AACrC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,4DAAoB;AAChC;;AAEA;AACA,YAAY,0DAAiB;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAA4B;;AAEpC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,YAAY,gEAAwB;AACpC,SAAS;;AAET;AACA;AACA,QAAQ,oDAAa;AACrB,QAAQ,gEAAwB;AAChC;AACA,KAAK;;AAEL;AACA,QAAQ,gEAAwB;AAChC;AACA,QAAQ,qDAAe;AACvB,QAAQ,mEAA2B;;AAEnC,KAAK;;;;AAIL;AACA;AACA;;;AAGsD;;;;;;;;;;;;;;;;;;;;;ACjPtD;AACA;AACA;AACA;AACA;;AAE2C;AACH;;AAExC;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAkB;AAC9B;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,+BAA+B,KAAK;;AAEpC;;;;;AAKA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,kBAAkB;;AAEzC;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC3OA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,qBAAqB;;AAEpD;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;;;;;;;;;;;;;;;;;;;;AC1FA,CAAsC;AACP;AACK;;AAEpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,qDAAiB;AACzB;AACA;AACA;;AAEA,YAAY;AACZ;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;AACA,2BAA2B,qBAAqB;AAChD;AACA,kC;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA,gBAAgB,kDAAY;AAC5B;AACA,aAAa;AACb;AACA,gBAAgB,wDAAkB;AAClC;AACA;;AAEA,SAAS;AACT;AACA,YAAY,wDAAkB;AAC9B;;;;AAIA;;AAEA,YAAY;AACZ;;;;AAIoC;;AAEpC;AACA;AACA;AACA;AACA;AACA,G;;;;;;;;;;;;;;;;;;ACnHqC;AACa;AACK;AACE;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,qE;AACA;AACA,kC;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;AACA,QAAQ,2DAAgB;AACxB;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,2DAAgB;;AAExB;AACA;AACA;AACA;AACA,YAAY,2DAAgB;AAC5B,S;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA,uBAAuB,yBAAyB;AAChD;AACA,gBAAgB,6DAAiB;;AAEjC,aAAa;AACb,gBAAgB,4DAAgB;AAChC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,QAAQ,2DAAgB;;AAExB;AACA;;AAEA;AACA;AACA,YAAY,2DAAgB;AAC5B,S;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;;;AAGA;;AAEA;AACA,2BAA2B,wBAAwB;AACnD,gBAAgB,4DAAgB;AAChC;AACA;;;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;;AAEA;AACA;AACA,CAAC;;;;;;;;;UC5XD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["import { grabTask } from \"./grabTask.js\";\nimport { itemRef, manipulateTaskArray, projectCreate } from \"./index.js\";\nimport { taskPrint } from \"./printTasks.js\";\nimport { projects } from \"./project.js\";\n/* \n************************************************************************************\n**********************************EDIT ITEMS MODULE*********************************\n************************************************************************************\n*/\n\n// module made for editing and interacting with each task item\nconst editItems = (function() {\n\n    // array for replacing .textSpans items\n    let newTextArray = [];\n\n    // variables that target DOM elements for deletion and editing\n    const taskPanel = document.querySelector('.taskPanel');\n\n    // function that houses the event listener for the deleteItem function\n    function buttonEventListeners(event) {\n        // variables that get each nodeList of buttons for interaction\n        const deleteButtons = document.querySelectorAll('.itemDelete');\n        const editButtons = document.querySelectorAll('.editTask');\n        const completeButtons = document.querySelectorAll('.completeTask');\n        const checkedButtons = document.querySelectorAll('.checkedTask');\n\n\n        deleteButtons.forEach(button => button.addEventListener('click', _deleteItem));\n        editButtons.forEach(button => button.addEventListener('click', _editTask));     \n        completeButtons.forEach(button => button.addEventListener('click', _completeTask));\n        checkedButtons.forEach(button => button.addEventListener('click', _completeTask));\n    }\n\n    // private function that removes task item nodes from taskPanel\n    function _deleteItem(event) {\n\n        // variables that grab each parent + task to pinpoint the index of said task\n        const parent = event.target.parentElement;\n        const task = parent.children[4].textContent;\n        const project = parent.children[0].textContent;\n        const action = 'delete';\n        // variable for task index\n        \n        let index = searchItem(task);\n        let projectIndex = searchProjectItems(project);\n        // variable that fetches array \n        let itemArray = itemRef.arrayShare();\n        \n        // removes items from both the array, localStorage, and the DOM\n        taskPrint.removeProject(project);\n        itemRef.update(action, index, 1);\n        taskPanel.removeChild(parent);  \n        projects.delete(projectIndex); \n    }\n\n\n\n        /* I think I need to get the index of each item to print upon clicking\n                then I need to send that into itemRef and replace w/e item is edited\n                then call for a storage Push so it updates the item\n         */\n\n    function searchItem(data) {\n\n        const array = itemRef.arrayShare();\n\n        for (var i = 0; i < array.length; i++){\n            let index = array[i].task;\n            if (index === data) {\n                return array.indexOf(array[i]);\n            }\n        }\n\n    }\n\n    function searchProjectItems(project) {\n        const array = projects.share();\n\n        for (var i = 0; i < array.length; i++) {\n            let index = array[i].projectName;\n\n            if (index === project) {\n                console.log(array.indexOf(array[i]));\n                return array.indexOf(array[i]);\n            }\n        }\n    }\n\n\n    /* \n    **************************** COMPLETE TASK *******************************    \n    */\n\n    // function that grays each task out that is already marked complete\n    function loadComplete(item) {\n        \n        const gray = \"filter: grayscale(1);\";\n        const checkBox = item.children[1];\n        \n        checkBox.classList.remove('completeTask');\n        checkBox.classList.add('checkedTask');\n        item.style.cssText = `${gray}`;\n    } \n\n    // private function that marks task item as completed\n    function _completeTask() {\n        // variables that fetch and assign the cssText for the clicked completeTask button\n        const parent = event.target.parentElement;\n        const gray = \"filter: grayscale(1);\";\n        const normal = \"filter: grayscale(0);\";\n        const action = 'complete';\n\n        // targets specific element interacted with and returns a usable index position\n        const task = parent.children[4].textContent;\n        const index = searchItem(task);\n        let status = 'incomplete';\n        console.log(index);\n        \n        // switch statement that (based on the cssText of the clicked element) either grays out, or \n        // fills in the taskItem container div\n        switch(true) {\n            case parent.style.cssText === '':\n                event.target.classList.remove('completeTask');\n                event.target.classList.add('checkedTask');\n                parent.style.cssText = `${gray}`;\n                status = 'complete'\n                itemRef.update(action, index, status);\n            break;\n            case parent.style.cssText === \"filter: grayscale(1);\":\n                event.target.classList.remove('checkedTask');\n                event.target.classList.add('completeTask');\n                parent.style.cssText = `${normal}`;\n                status = 'incomplete';\n                itemRef.update(action, index, status);\n            break;\n            case parent.style.cssText === \"filter: grayscale(0);\":\n                event.target.classList.remove('completeTask');\n                event.target.classList.add('checkedTask');\n                parent.style.cssText = `${gray}`;\n                status = 'complete';\n                itemRef.update(action, index, status);\n            break;\n        }\n        completeLocalStorage(parent);\n    }   \n    \n    function completeLocalStorage(parent) {\n\n        // variables for grabbing identification\n       \n        const project = parent.children[0];\n        const name = parent.children[4];\n\n        const keys = Object.keys(localStorage);\n        let i = 0;\n\n        while (i < keys.length) {\n            const items = JSON.parse(localStorage.getItem(keys[i]));\n             if (items.task === name.textContent) {\n                // const oldItems = JSON.parse(localStorage.getItem(keys[i]).key);\n                var key = localStorage.key(i);\n                const newItems = {};\n                newItems.task = items.task;\n                newItems.notes = items.notes;\n                newItems.date = items.date;\n                newItems.project = items.project;\n                newItems.status = 'complete';\n                const newest = JSON.stringify(newItems);\n                localStorage.setItem(key, newest);\n                //  localStorage.setItem(items, `{task:${task}, notes: ${notes}, date: ${date}, ${project}, ${status}}`);\n                 console.log(key);\n             }\n            \n            i++\n        }\n    }\n    /* \n    **************************** EDIT TASK *******************************    \n    */\n\n    // private function that allows the task info to be edited\n    function _editTask() {\n\n        // variables that get each nodeList item of the specific container the clicked button is in\n        const parent = event.target.parentElement;\n        const project = parent.children[0]\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n\n\n        const projectTextArray = document.querySelectorAll('.textSpans');\n        \n\n        for (var i = 0; i < projectTextArray.length; i++) {\n            if (projectTextArray[i].textContent === project.textContent && name.tagName === 'DIV') {\n                \n                newTextArray.push(projectTextArray[i]);\n            } else if (projectTextArray[i].textContent === undefined) {\n                console.log('hmm');\n            }\n        }\n\n\n        // IF the edit button is clicked and the task.tagName is still a DIV, then the code runs\n        // ELSE it will run the function called below which appends the newly edited info to the DOM\n        if (name.tagName === 'DIV') {\n        // variables for appending input items to taskItem\n\n        const editProject = document.createElement('input');\n            editProject.classList.add('projectName');\n            editProject.style.cssText = 'text-align: center;';\n            editProject.placeholder = 'Edit Project Name';\n            parent.replaceChild(editProject, project);\n\n\n        const editName = document.createElement('input');\n            editName.classList.add('taskName');\n            editName.placeholder = 'Edit Task Name';\n            editName.style.cssText = 'text-align: center;';\n            parent.replaceChild(editName, name);\n\n\n        const editDate = document.createElement('input');\n            editDate.classList.add('taskDate');\n            editDate.type = 'date';\n            editDate.style.cssText = \"background-color: White; color: black; text-align: center;\";\n            editDate.placeholder = 'Edit Date';\n            parent.replaceChild(editDate, date)\n\n\n\n        const editDescription = document.createElement('input');\n            editDescription.classList.add('description');\n            editDescription.placeholder = 'Edit Notes';\n            editDescription.style.cssText = 'text-align: center;';\n            parent.replaceChild(editDescription, notes);\n\n            event.target.classList.remove('editTask');\n            event.target.classList.add('editingTask');\n    // parent.appendChild();\n        \n        } else {\n            _appendTask(newTextArray[0]);\n        }\n    }\n\n    /* \n    ************************************************************************************\n    **********************************APPEND EACH TASK AFTER EDIT***********************\n    ************************************************************************************\n    */\n\n\n    // function that takes newly edited information and publishes them to the DOM\n    function _appendTask(textIndex) {\n\n        // variable for grabbing all task items\n        const taskItems = document.querySelectorAll('.taskItem');\n        const tasks = Array.from(taskItems);\n\n        event.target.classList.remove('editingTask');\n        event.target.classList.add('editTask');\n\n        // gets the container of the specific edit button clicked\n        const parent = event.target.parentElement;\n\n        // variables for appending finished items to taskItem\n        const project = parent.children[0]\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n        \n\n        const taskName = document.createElement('div');\n            taskName.classList.add('taskName');\n            taskName.textContent = name.value;\n\n        const description = document.createElement('div');\n            description.classList.add('description');\n            description.textContent = notes.value;\n\n        const taskDate = document.createElement('div');\n            taskDate.classList.add('taskDate');\n            taskDate.textContent = date.value;\n\n        const projectName = document.createElement('div');\n            projectName.classList.add('projectName');\n            projectName.textContent = project.value;\n\n            \n            if(textIndex != undefined && project.value != '') {\n                const projectScroll = document.querySelector('.scrollContainer');\n                projectScroll.appendChild(textIndex);\n                textIndex.textContent = project.value;\n                newTextArray.pop();\n            } else if (project.value === '') {\n                const projectScroll = document.querySelector('.scrollContainer');\n                projectScroll.removeChild(textIndex);\n                console.log('hey');\n            }\n\n\n        parent.replaceChild(projectName, project);\n        parent.replaceChild(taskName, name);\n        parent.replaceChild(taskDate, date);\n        parent.replaceChild(description, notes);\n\n        // variable that fetches index of edited element\n        const index = tasks.indexOf(parent);\n        \n        // conditional that prints project to scroll container if project name exists\n        if (project.value != '') {\n            taskPrint.project(project.value, index, true);\n        }\n        _checkItemData(event.target, name.value, notes.value, date.value, project.value, status, index)\n    }\n\n    \n    // function to confirm there are no repeating task values\n    function _checkItemData(target, taskName, notes, date, project, status, index) {\n\n        // variable for fetching the itemArray inside localStorage and assigning it a variable\n        const arrays = JSON.parse(localStorage.getItem('itemArray'));\n\n        // variables that help the switch statement below decide what to do based on if repeat data is found\n        let existing = false;\n        let dataSet = undefined;\n        let projectPrompt = false;\n\n        // loop that runs through each locallyStored item and checks if there are repeated values\n        switch(true) {\n            case arrays === null:     \n            break;\n            \n            case arrays != null:\n            for ( var i = 0; i < arrays.length; i++) {\n                if (arrays[i].task === taskName && arrays[i].task != '') {\n                    existing = true;\n                    dataSet = 'tasks';\n                }\n\n                if (arrays[i].notes === notes && arrays[i].notes != '') {\n                    existing = true;\n                    dataSet = 'notes';\n                }\n\n                if (arrays[i].project === project && arrays[i].project != '') {\n                    existing = true;\n                    dataSet = 'projects';\n                    projectPrompt = true;\n                }\n            }\n        }\n        // if no repeated data, print the task\n            // if there IS repeated data, alert the user, and refuse their task\n        switch(true) {\n            case existing === false && taskName === '':\n                return alert('Tasks cannot be blank!');\n            break;\n\n            case existing === false && taskName != '':\n                grabEditedTask.newTask(event.target, name.value, notes.value, date.value, project.value, status, index);\n\n            break;\n\n            case existing === true:\n                if (projectPrompt === true) {\n                    alert(`If you want to add tasks to your ${dataSet}, click on the 'Projects' tab.`);\n                     alert(`All ${dataSet} must be unique. `);\n                     console.log('top');\n                } else {\n                    console.log('bottom');\n                    return alert(`All ${dataSet} must be unique. `);\n                }\n            break;\n        }\n\n    }\n\n\n    return {\n    eventListeners: buttonEventListeners,\n    complete: loadComplete,\n\n    }\n\n})();\n\n    /* \n    ************************************************************************************\n    **********************************GRAB EDITED TASK**********************************\n    ************************************************************************************\n    */\n\n    // module that grabs edited task info and communicates that changes were made\n    const grabEditedTask = (function() {\n\n        /* \n            there should be a way to track back to the orignial array in index.js when you edit\n            it'll figure out which index the edited item belongs to, determine if it has a project\n            and rewrite that information. Keeping it's place in the array index, but updating it\n        */\n        // variables that grab specific task that is edited\n\n        function receiveEditedTask(target, task, notes, date, project, status, index) {\n            const editedTask = {};\n            editedTask.name = task,\n            editedTask.notes = notes,\n            editedTask.date = date,\n            editedTask.project = project,\n            editedTask.status = 'incomplete',\n            _updateArrays(editedTask, index)\n\n        }\n\n        function _updateArrays(task, index) {\n            console.log(task);\n            // variable that tells itemRef that the action being taken is 'edit'\n            const edit = 'edit';\n            itemRef.update(edit, index, task)\n        }\n\n        return {\n            newTask: receiveEditedTask\n        }\n    })();\n\n    const deleteButton = document.querySelector('.formDelete');\n        deleteButton.addEventListener('click', () => {\n    })\n\n     /* \n    ************************************************************************************\n    **********************************MODULE FOR DELETING EVERY ITEM********************\n    ************************************************************************************\n    */\n\n    const taskUpdate = (function() {\n\n        // variable that grabs task container & tasks\n        const mainSection = document.querySelector('.mainSection');\n        const taskPanel = document.querySelector('.taskPanel');\n        const allItems = taskPanel.children;\n        // function that erases all tasks from panel\n\n        function eraseTasks() {\n            var child = taskPanel.lastElementChild; \n            while (child) {\n                taskPanel.removeChild(child);\n                child = taskPanel.lastElementChild;\n            }\n\n        }\n\n        // function that deletes each .textSpans element so they don't spam\n        function clearProjectName() {\n\n            // variable that fetches project panel\n            const scrollContainer = document.querySelector('.scrollContainer');\n            var child = document.querySelectorAll('.textSpans');\n\n            for(var i = 0; i < child.length; i++) {\n                scrollContainer.removeChild(child[i]);\n            }\n\n        }\n\n        return {\n            erase: eraseTasks,\n            clear: clearProjectName\n        }\n    })();\n\nexport { editItems, taskUpdate }","import { taskPrint } from \"./printTasks.js\";\nimport { ItemFactory, ProjectFactory } from \"./taskFactory.js\";\nimport { projects } from \"./project.js\";\n/* \n************************************************************************************\n***************** MODULE THAT GRABS INFO FOR TASKS FROM INPUT FIELDS ***************\n************************************************************************************\n*/\n\nconst grabTask = (function() {\n    \n    \n    // upon click will get task  item\n    function toDoInput() { \n        const input = document.querySelector('.task');\n        return input.value;\n    }\n\n    // on click will get notes of todo list item\n    function itemNotes() {\n        const notes = document.querySelector('.notes');\n        return notes.value;\n    }\n\n    // on click will get completion date\n    function itemDate() {\n        const itemDate = document.querySelector('.date');\n        return itemDate.value;\n    }\n\n    function itemProject() {\n        const projectTitle = document.querySelector('.project');   \n        return projectTitle.value;\n    }\n\n    // function to confirm there are no repeating task values\n    function checkItemData(taskName, notes, date, project, status) {\n\n        // variable for fetching the itemArray inside localStorage and assigning it a variable\n        const arrays = JSON.parse(localStorage.getItem('itemArray'));\n\n        // variables that help the switch statement below decide what to do based on if repeat data is found\n        let existing = false;\n        let dataSet = undefined;\n        let projectPrompt = false;\n\n        // loop that runs through each locallyStored item and checks if there are repeated values\n        switch(true) {\n            case arrays === null:     \n            break;\n            \n            case arrays != null:\n            for ( var i = 0; i < arrays.length; i++) {\n                if (arrays[i].task === taskName && arrays[i].task != '') {\n                    existing = true;\n                    dataSet = 'tasks';\n                }\n\n                if (arrays[i].notes === notes && arrays[i].notes != '') {\n                    existing = true;\n                    dataSet = 'notes';\n                }\n\n                if (arrays[i].project === project && arrays[i].project != '') {\n                    existing = true;\n                    dataSet = 'projects';\n                    projectPrompt = true;\n                    const newProject = ProjectFactory();\n                    newProject.receiveProjects(taskName, notes, date, project, status);\n                }\n            }\n        }\n        // if no repeated data, print the task\n            // if there IS repeated data, alert the user, and refuse their task\n        switch(true) {\n            case existing === false && taskName === '':\n                return alert('Tasks cannot be blank!');\n            break;\n\n            case existing === false && taskName != '':\n                const sendGrabbedData = ItemFactory();\n                sendGrabbedData.receiveTasks(taskName, notes, date, project, status);\n            break;\n\n            case existing === true:\n                if (projectPrompt === true) {\n                   console.log('hmm')\n                } else {\n                    console.log('bottom');\n                    return alert(`All ${dataSet} must be unique. `);\n                }\n            break;\n        }\n       \n    }\n\n    // function that gathers all task data from each form, and pushes to the above function 'checkItemData()'\n    function sendItemData() {\n\n        const input = document.querySelector('.task');\n        const notesInput = document.querySelector('.notes');\n        const dateInput = document.querySelector('.date');\n        const projectTitle = document.querySelector('.project'); \n        \n        const taskName = toDoInput();\n        const notes = itemNotes();\n        const date = itemDate();\n        const project = itemProject();\n        \n        const status = 'incomplete'\n        checkItemData(taskName, notes, date, project, status);\n\n        projectTitle.value = '';\n        dateInput.value = '';\n        input.value = '';\n        notesInput.value = '';\n    }\n\n    return {\n        title: toDoInput,\n        notes: itemNotes,\n        itemDate: itemDate,\n        itemProject: itemProject,\n        check: checkItemData,\n        send: sendItemData\n    }\n})()\n\nexport { grabTask }\n","import { ItemFactory } from \"./taskFactory\";\nimport  exampe  from \"./updateDOM\";\nimport { grabTask } from \"./grabTask\";\nimport { editItems, taskUpdate } from \"./editTasks\";\nimport { tabbedPrint, taskPrint } from \"./printTasks\";\nimport { sidebarTab } from \"./updateDOM\";\nimport { tabSelection } from \"./updateDOM\";\nimport { fi } from \"date-fns/locale\";\nimport { projects } from \"./project\";\n// This module will be used as the reference interface. It has an array of all todo list items, and \n// functions that break each list item down into its individual peices which can then be accessed as needed\nconst itemRef = (function() {\n\n    // array of each task in the list shared by the factory function that made them\n    const itemArray = [];\n    \n        function fillArray() {\n            // gets stored array from localStorage\n            const fillArray = JSON.parse(localStorage.getItem('itemArray'));\n \n            // keeps itemArray filled with saved values so it doesn't reset on window load\n            switch(true) {\n                case fillArray != null:\n                    for (var i = 0; i < fillArray.length; i++) {\n                        itemArray.push(fillArray[i]);\n                    }\n                break;\n            }\n        }\n\n        // pushes todo item into Item array & other functions inside the itemRef Module\n        function pushItem(item) {\n            // pushes item to array\n            itemArray.push(item);\n            \n            storagePush(item);\n        }\n\n        // pushes each item into localStorage \n        function storagePush(item) {\n\n            // gives index position\n            const index = itemArray.indexOf(item);\n            // stores the itemArray in localStorage\n            const storeArray = JSON.stringify(itemArray);\n            localStorage.setItem('itemArray', storeArray);\n            \n            // variable that contains the obtained reference to the locallyStored 'itemArray'\n            let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n            // console.log(storedArray[index].task);   \n            shareItem(item, index);\n            shareArrayItems(item, index, 'index');\n              \n        }\n\n        function arrayUpdate(action, index, amount) {\n            let storeArray = JSON.stringify(itemArray);\n\n            switch(true) {\n                case action === 'delete':\n                    itemArray.splice(index, 1);\n                    storeArray = JSON.stringify(itemArray);\n                    localStorage.setItem('itemArray', storeArray);\n                break;\n                case action === 'edit':\n                    console.log(amount);\n                    const newItem = {};\n                    newItem.task = amount.name;\n                    newItem.notes = amount.notes;\n                    newItem.date = amount.date;\n                    newItem.project = amount.project;\n                    newItem.status = amount.status;\n\n                   \n                    itemArray.splice(index, 1, newItem);\n                    storeArray = JSON.stringify(itemArray);\n                    localStorage.setItem('itemArray', storeArray);\n                    let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n                    console.log(storedArray);\n\n                    \n                    \n                break;\n                case action === 'complete':\n                    itemArray[index].status = amount;\n                    storeArray = JSON.stringify(itemArray);\n                    localStorage.setItem('itemArray', storeArray);\n                break;\n            }\n        }\n\n        function arrayShare(item) {\n            \n            return itemArray;\n        }\n\n        // shares specific itemArray\n        function shareArrayItems(item, index, page) {\n            tabSelection.receive(item, index, page);\n        }\n\n        function shareItem(item, index) {\n            taskPrint.receive(item, index);\n\n        }\n\n    // shares specific item\n    function shareTask(index) {\n        console.log('sharing task');\n        console.log(itemArray[index])\n        return itemArray[index];\n    }\n\n        // shares specific item name\n        function shareName(index) {\n            return itemArray[index].name;\n        }\n\n        // shares specific item notes\n        function shareNote(index) {\n            return itemArray[index].notes;\n        }\n\n        // shares specific item date\n        function shareSummary(index) {\n            return itemArray[index].date;\n        }\n\n        // shows which project the item belongs to\n        function shareProject(index) {\n           return itemArray[index].project;\n        }\n\n        \n\n    return {\n        fillArray, fillArray,\n        printItem : pushItem,\n        arrayShare: arrayShare,\n        title: shareName,\n        notes: shareNote,\n        summary: shareSummary,\n        notes: shareProject,\n        task: shareTask,\n        share: shareArrayItems,\n        shareItem: shareItem, \n        update: arrayUpdate,\n    }\n})();\n\n\n// Module for array manipulation \nconst manipulateTaskArray = (function() {\n    \n\n    function _grabArray() {\n        const itemArray = itemRef.arrayShare();\n        console.log(itemArray);\n        return itemArray;\n       \n    }\n\n    function replaceItem(item, index) {\n        const itemArray = _grabArray();\n        itemArray.splice(index, 1, item);\n        console.log(itemArray);\n    }\n\n    return {\n        replace: replaceItem\n    }\n})();\n\n\n\n// module for creating projects\nconst projectCreate = (function() {\n\n    // array that contains each project\n    const projectArray = [];\n\n    // function that gathers data about each item\n    function fetchItems(item) {\n        const project = {  };\n        project.task = item.task;\n        project.notes = item.notes;\n        project.date = item.date;\n        project.project = item.project;\n        project.status = 'unfinished';\n        tabSelection.receiveProjects(project);\n\n        projectArray.push(project);\n        const index = projectArray.indexOf(project);\n        \n    }\n\n    // function that shares projectArray\n    function shareProjectArray() {\n        return projectArray;\n    }\n\n    // creates project container for all sub tasks\n    function createProject(project) {\n        \n\n    }\n\n    return {\n        fetch: fetchItems,\n        shareArray: shareProjectArray,\n        create: createProject\n    }\n})();\n\n    // keeps all event listeners active\n    const sidebar = document.querySelector('.sidebar');\n        sidebar.addEventListener('click', () => {\n            editItems.eventListeners();\n        });\n\n    const submit = document.querySelector('.submit');\n    submit.addEventListener('click', () => {\n        grabTask.send();\n        editItems.eventListeners();\n        return false;\n    });\n\n    window.addEventListener('load', () => {\n        editItems.eventListeners();\n        itemRef.fillArray();\n        projects.update();\n        tabSelection.eventListeners();\n\n    })\n\n\n\n/* \n    I need there to be a way to communicate with\n*/\n\n\nexport { itemRef, projectCreate, manipulateTaskArray }\n\n\n","\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS INFO TO DOM*****************************\n************************************************************************************\n*/\n\nimport { itemRef, projectCreate } from \".\";\nimport { editItems } from \"./editTasks\";\n\n// Module that prints each task item to UI\nconst taskPrint = (function() {\n    // variables for task parent\n    const taskPanel = document.querySelector('.taskPanel');\n    let item = document.querySelector('.taskItem');\n\n   \n\n    function receiveLocalStorage(archive) {\n        console.log(archive);\n    }\n\n    function receiveItem(item, index) {\n        // calls unpackItem to breakdown each item key\n        unpackItem(item, index);\n    }\n\n    // takes item and breaks it down into each part\n    function unpackItem(item, index, status) {\n\n        const taskInput = document.querySelector('.task');\n        \n                const task = {};\n                task.task = item.task;\n                task.notes = item.notes;\n                task.date = item.date;\n                task.project = item.project;\n                task.status = item.status;\n                printTask(task, index, task.status);\n                // console.log(task, index);    \n    }\n\n    // function that calls each appendChild method in order to create the task\n    function printTask(task, index, status) {\n        const item = document.createElement('div');\n        item.classList.add('taskItem');\n        \n        // appends taskItem container DIV to task item section\n        taskPanel.appendChild(item);\n\n        _printProjectName(item, task.project);\n        _printButtons(item);\n        _printTaskName(item, task.task);\n        _printTaskDate(item, task.date);\n        _printDescription(item, task.notes);\n        if (status === 'complete') {\n            editItems.complete(item);\n        }\n\n        if (task.project != '') {\n            appendProjectName(task, index, status)\n        }\n        // shareTaskItem(item);\n        // itemRef.share(); // not sure why this was here?\n        // createItemObject(item);\n    }\n\n    function appendProjectName(task, index, status) {\n        const scrollContainer = document.querySelector('.scrollContainer');\n\n        if (status != true) {\n            // const text span\n            const textSpan = document.createElement('span');\n            textSpan.classList.add('textSpans');\n            const name = task.project;\n            textSpan.textContent = name;\n\n            scrollContainer.appendChild(textSpan);\n        } else if (status === true) {\n            const textSpan = document.querySelectorAll('.textSpans');\n            for(var i = 0; i < textSpan.length; i++) {\n                if (textSpan[i].textContent === '') {\n                    const name = task.project;\n                    textSpan[i].textContent = name;\n                }\n            }\n        }\n\n        // breaks up task\n        \n    }\n\n    function removeProjectName (project) {\n\n        // variable that gets each scroll project span ele\n        const projectSpan = document.querySelectorAll('.textSpans');\n        const scrollContainer = document.querySelector('.scrollContainer');\n\n        for (var i = 0; i < projectSpan.length; i++) {\n            if (project === projectSpan[i].textContent) {\n                scrollContainer.removeChild(projectSpan[i]);\n            }\n        }\n    }\n\n    // function that specifically prints each clicked project item to projectPanel\n    function projectToPanel(task) {\n\n        // variable that fetches project panel\n        const panel = document.querySelector('.projectPanel');\n\n        panel.textContent = `${task}`;\n\n    }\n\n    \n    \n    \n                // variable for task container\n                // prints the name of the project\n                function _printProjectName(item, project) {\n\n                    const projectName = document.createElement('div');\n\n                    projectName.classList.add('projectName');\n\n                    projectName.textContent = project;\n                    if(projectName.textContent === '') {\n                        projectName.textContent = '';\n                        item.appendChild(projectName);\n                    } else {\n                        item.appendChild(projectName);\n                    }\n                }\n\n                \n\n                // prints the buttons (delete, complete, edit)\n                function _printButtons(item) {\n\n                    const completeTask = document.createElement('button');\n                    completeTask.classList.add('completeTask');\n                    completeTask.title = \"Complete Task\";\n                    // const completeTaskObject = {};\n                    // completeTaskObject.toggle = false;\n                    // completeTaskObject.object = completeTask;\n\n                    const editTask = document.createElement('button');\n                    editTask.classList.add('editTask');\n                    editTask.title = 'Edit Task'\n\n                    const itemDelete = document.createElement('button');\n                    itemDelete.classList.add('itemDelete');\n                    itemDelete.title = 'Delete Task'\n\n                    item.appendChild(completeTask);\n                    item.appendChild(editTask);\n                    item.appendChild(itemDelete);\n                }\n\n                // prints name of task\n                function _printTaskName(item, task) {\n                    const taskName = document.createElement('div');\n                    taskName.classList.add('taskName');\n\n                    taskName.textContent = task;\n                    item.appendChild(taskName);\n                }\n            \n                // prints task date\n                function _printTaskDate(item, date) {\n                    const taskDate = document.createElement('div');\n                    taskDate.classList.add('taskDate');\n\n                    taskDate.textContent = date;\n                    item.appendChild(taskDate);\n                }\n\n                // prints description / notes for task\n                function _printDescription(item, notes) {\n                    const description = document.createElement('div');\n                    description.classList.add('description');\n\n                    description.textContent = notes;\n                    item.appendChild(description);\n                }\n\n\n    return {\n        localStore: receiveLocalStorage,\n        receive: receiveItem,\n        unpack: unpackItem,\n        print: printTask,\n        project: appendProjectName,\n        pPanel: projectToPanel,\n        removeProject: removeProjectName\n    }\n\n})();\n\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS TAB SPECIFIC CONTENT********************\n************************************************************************************\n*/\n\nconst tabbedPrint = (function() {\n    // breaks down each array sent into it's individual items\n    \n    function arrayUnpack(array) {\n        for (var i = 0; i < array.length; i++) {\n           \n            _arrayItem(array[i]);\n        }\n    }\n\n\n    function _arrayItem(index) {\n        const item = {};\n        item.task = index.task;\n        item.notes = index.notes;\n        item.date = index.date;\n        item.project = index.project;\n        item.status = index.status;\n        taskPrint.unpack(item);\n    }\n\n    return {\n        unpack: arrayUnpack\n    }\n})();\n\n\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS TAB SPECIFIC CONTENT********************\n************************************************************************************\n*/\n\nexport { taskPrint, tabbedPrint }","\n\n/* \n************************************************************************************\n***************** MODULE THAT CONTROLS PROJECT FUNCTIONALITY************************\n************************************************************************************\n*/\n\n// module that stores projects into localStorage\nconst projects = (function() {\n\n    // array that stores each project obj\n    let projectArray = [];\n    const existing = JSON.parse(localStorage.getItem('projectArray'));\n  \n\n    function arrayShare() {\n        return projectArray;\n    }\n        // on window load this pushes each locally stored project into the projectArray \n        function projectArrayUpdate() {\n            // gets all contents of the project array from localStorage\n\n            if (existing != null) {\n                // one by one pushes each project into projectArray\n                for (var i = 0; i < existing.length; i++) {\n    \n                    projectArray.push(existing[i]);\n                    \n                }\n            }\n        }\n\n\n\n    // function that adds tasks to locally stored array\n    function addTasks(project, index, task) {\n\n        project.tasks.push(task);\n\n        projectArray.splice(index, 1, project);\n        const locallyStored = JSON.stringify(projectArray);\n        localStorage.setItem('projectArray', locallyStored);\n        \n\n        console.log(existing);\n    }\n\n    function deleteProject(index) {\n        projectArray.splice(index, 1);\n\n        const locallyStored = JSON.stringify(projectArray);\n        localStorage.setItem('projectArray', locallyStored);\n\n    }\n\n    function convey() {\n        if (existing != null) {\n            console.log(existing);\n        }\n    }\n\n    // receives each project, pushes them into the array and passes them off to be sored\n    function receiveProjects(project) {\n      \n        projectArray.push(project);\n        const index = projectArray.indexOf(project);\n        storeProjects(project, index);\n    }\n\n    // stores each project in localStorage\n    function storeProjects(project, index) {\n\n        const locallyStored = JSON.stringify(projectArray);\n        localStorage.setItem('projectArray', locallyStored);\n\n    }\n       \n\n    return {\n        share: arrayShare,\n        receiving: receiveProjects,\n        update: projectArrayUpdate,\n        add: addTasks,\n        convey: convey,\n        delete: deleteProject,\n    }\n\n})();\n\nprojects.convey();\n\nexport {projects}"," import { grabTask } from \"./grabTask\"\nimport {itemRef} from \"./index\"\nimport { projects } from \"./project\"\n\n// Module that turns task data into an object\nconst ItemFactory = () => {\n\n    // receiving function that breaks down each task item and sends it onward\n    function receiveTasks(taskName, notes, date, project, status) {\n        \n        // forms each group of task data into an object \n        const item = {\n           task: taskName,\n           notes: notes,\n           date: date,\n           project: project, \n           status: status\n        }\n\n        _pushItem(item);\n    }\n    // pushes each task into index.js where it is added to the taskArray\n    function _pushItem(item) {\n        itemRef.printItem(item);\n        const newProject = ProjectFactory();\n        newProject.qualify(item);\n    }\n   \n    return { receiveTasks }\n}\n\n\n\nconst ProjectFactory = () => {\n\n    // variable that gets locallyStored projectArray\n    const existing = JSON.parse(localStorage.getItem('projectArray'));\n\n    function qualify (item) {\n        const projectName = item.project;\n        if (projectName != undefined) {\n            _breakDown(item);\n        }\n       \n    }\n\n    function _breakDown(item) {\n        const taskName = item.task;\n        const notes = item.notes;\n        const date = item.date;\n        const project = item.project;\n        const status = item.status;\n        receiveProjects(taskName, notes, date, project, status);\n    }\n\n    function receiveProjects(taskName, notes, date, project, status) {\n\n        // variables for repeat or new projects\n        let repeat = false;\n        let newProject = false;\n\n        // creates each project that contains each task inside of it\n        const container = {};\n        container.projectName = project;\n        container.tasks = [];\n\n        const task = {};\n        task.task = taskName;\n        task.notes = notes;\n        task.date = date;\n        task.project = project;\n        task.status = status;\n\n        if (existing != null) { \n            for (var i = 0; i < existing.length; i++) {\n                if (existing[i].projectName === project) {\n                    repeat = true; \n                    var projectItem = existing[i];\n                    var index = [i];\n                } else {\n                    newProject = true;\n\n                }\n            }\n\n            if ( repeat === true ) {\n                projects.add(projectItem, index, task);\n                repeat = false;\n            } else if ( newProject === true ) {\n                container.tasks.push(task);\n                projects.receiving(container);\n                newProject = false;\n            }\n\n        } else {\n            container.tasks.push(task);\n            projects.receiving(container);\n        }\n\n\n\n    }\n\n    return {qualify, receiveProjects}\n}\n\n\n\nexport {ItemFactory, ProjectFactory}\n\n/* \nI may need **************************\n    - something to reference all items in itemArray and check for matching projects\n    - it will grab that matching project and push the new data inside of that project's array\n    - then format it so it can push THAT data on to be printed or used however is needed\n */","import { itemRef } from \"./index.js\";\nimport { formatDistance, subDays } from 'date-fns'\nimport { editItems, taskUpdate } from \"./editTasks.js\";\nimport { taskPrint, tabbedPrint } from \"./printTasks.js\";\n/* \n************************************************************************************\n****************************CONTROLS WHICH SIDEBAR IS LIT UP************************\n************************************************************************************\n*/\n\n// module that tracks which sidebar panel is interacted with, and then passes that info on\n// so the data corresponding with that tab can be displayed in the DOM\nconst sideBarHighlight = (function () {\n\n    // variables for targeting each tab\n    const sideBarChildren = document.querySelector('.sidebar').children;\n    // each tab element\n    const child1 = sideBarChildren[0];\n    const child2 = sideBarChildren[1];\n    const child3 = sideBarChildren[2];\n    const child4 = sideBarChildren[3];\n    const child5 = sideBarChildren[4];\n\n    // array to contain sidebar tabs\n    const sideBarArray = [];\n    sideBarArray.push(child1, child2, child3, child4, child5);\n\n    function defaultTab() {\n        const all = document.querySelector('.all');\n        all.classList.add('hovered');\n        operator(0);\n    }\n\n    // function that highlights the tab that is clicked and unhighlights the tabs that aren't\n    function sideBarEventListeners(number) {\n\n        \n\n            if (number != undefined) {\n                child1.classList.remove('hovered');\n                child2.classList.remove('hovered');\n                child3.classList.remove('hovered');\n                child4.classList.remove('hovered');\n                child5.classList.remove('hovered');\n                // added by 'number'\n                child5.classList.add('hovered');\n\n            } else if (number === undefined) {\n\n            sideBarArray.forEach(tab => tab.addEventListener('click', () => {\n                const index = sideBarArray.indexOf(event.target);\n                switch (true) {\n                    case event.target.classList.contains('hovered'):\n                        event.target.classList.remove('hovered');\n                        defaultTab();\n                        tabSelection.eventListeners();\n                        break;\n                    case !event.target.classList.contains('hovered'):\n                        child1.classList.remove('hovered');\n                        child2.classList.remove('hovered');\n                        child3.classList.remove('hovered');\n                        child4.classList.remove('hovered');\n                        child5.classList.remove('hovered');\n                        event.target.classList.add('hovered');\n                        operator(index);\n                        tabSelection.eventListeners();\n                        break;\n                    \n                }\n\n                const hover = document.querySelector('.hovered');\n\n\n            }))\n        }\n    }\n\n    // shares the array that contains each sidebar element\n    function shareTabs() {\n        return sideBarChildren;\n    }\n\n    return {\n        default: defaultTab,\n        children: sideBarEventListeners,\n        share: shareTabs\n    }\n})();\n\n// function that calls functions in the 'tabSelection' module based on which tab is clicked\nfunction operator(index) {\n    switch (true) {\n        case index === 0:\n            tabSelection.all();\n            break;\n        case index === 1:\n            tabSelection.inbox();\n            break;\n        case index === 2:\n            tabSelection.today();\n            break;\n        case index === 3:\n            tabSelection.weekly();\n            break;\n        case index === 4:\n            tabSelection.projects();\n            break;\n    }\n}\n\n/* \n************************************************************************************\n****************************MODULE THAT CONTROLS EACH TAB***************************\n************************************************************************************\n*/\n\n// runs logic for each tab based on which tab is clicked\nconst tabSelection = (function () {\n\n    const projectArray = [];\n    const itemArray = [];\n\n    // listens for which project title is clicked on and prints it to the project tab display\n    function eventListeners() {\n        const textSpans = document.querySelectorAll('.textSpans');\n\n        const textArray = Array.from(textSpans);\n        textArray.forEach(text => text.addEventListener('click', _eventListen));\n    \n    }\n\n    function _eventListen() {\n        const projectPanel = document.querySelector('.projectPanel'); \n        if (projectPanel != undefined) {\n                    projectName();               \n        } else {\n            projectsTab(true);\n            projectName();\n        }\n    }\n\n    function receiveProjects(project) {\n        projectArray.push(project);\n\n    }\n\n    function receiveArrayItems(item, index, page) {\n\n        switch (true) {\n            case page === 'index':\n                itemArray.push(item);\n                break;\n        }\n    }\n    \n    // functions for each tab\n    function inboxTab() {\n\n        // variables that target elements of DOM needed to remove projectPanel\n        const taskPanel = document.querySelector('.taskPanel');\n        const projectPanel = document.querySelector('.projectPanel');\n        const mainSection = document.querySelector('.mainSection');\n        const isPresent = mainSection.contains(projectPanel);\n        \n        // removes project panel\n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n        taskUpdate.erase();\n    }\n\n\n    function todayTab() {\n        \n        // variables that target elements of DOM needed to remove projectPanel\n        const taskPanel = document.querySelector('.taskPanel');\n        const projectPanel = document.querySelector('.projectPanel');\n        const mainSection = document.querySelector('.mainSection');\n        const isPresent = mainSection.contains(projectPanel);\n        \n        // removes projectpanel\n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n        taskUpdate.erase();\n        console.log(1);\n        // whatever taks are dated for today show up in the DOM\n    }\n\n\n    function weeklyTab() {\n\n        // variables that target elements of DOM needed to remove projectPanel\n        const taskPanel = document.querySelector('.taskPanel');\n        const projectPanel = document.querySelector('.projectPanel');\n        const mainSection = document.querySelector('.mainSection');\n        const isPresent = mainSection.contains(projectPanel);\n        \n        // removes projectPanel \n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n        taskUpdate.erase();\n        console.log(2);\n        // whatever tasks happen this week show up in the DOM\n    }\n    \n\n    function projectName() {\n        const projectPanel = document.querySelector('.projectPanel');\n        projectPanel.textContent = event.target.textContent;\n        let currentText = event.target.textContent;\n\n        eventListeners(currentText);\n        \n    }\n\n    // controls both ways that you can get to the project tab\n            // by clicking on the project tab itself\n            // or, but clicking on a project name in the scroll section\n    function projectsTab(condition) {\n        const projectText = event.target.textContent;\n        if (condition === true) {\n            sideBarHighlight.children(4);\n        } else {}\n        // erases all tasks from prior tabs and all scroll items\n        taskUpdate.erase();\n\n        // variables for finding taskSpan elements\n        const text = document.querySelectorAll('.taskSpans');\n        // if taskSpan elements are found, clear the projectScroll element of them\n        if (text != null) {\n            taskUpdate.clear();\n        } \n\n        // variable for targeting the 'mainSection' div && adding a place for chosen project title to go\n        const mainSection = document.querySelector('.mainSection');\n        mainSection.style.cssText = `\n        position: relative;\n        grid-area: \"main\";\n        grid-column: 4/11;\n        grid-row: 1/11;\n        background-color: var(--dark-color);\n        z-index: 5;\n        display: grid;\n        grid-template-columns: repeat(4, 24%);\n        grid-template-rows: repeat(10, 10%);\n        grid-template-areas: \n                \"form form\"\n                \"project project\"\n                \"items items\";\n        width: min(100%, 1200px);\n        `;\n\n        // const targets projectPanel div\n        const projectPanel = document.createElement('div');\n        projectPanel.classList.add('projectPanel');\n        // variable that targets taskPanel div\n        const taskPanel = document.querySelector('.taskPanel');\n\n        taskPanel.style.cssText = `grid-row: 5/11`;\n        \n        // appends projectPanel to section\n        mainSection.appendChild(projectPanel);\n        \n        // variable that allows task to print\n        let check = false;\n        \n\n        \n\n        // variable that contains the locallyStored array\n        const projectItems = JSON.parse(localStorage.getItem('itemArray'));\n\n        // pushes each project item to interface that prints them to DOM\n        for (var i = 0; i < projectItems.length; i++) {\n            if (projectItems[i].project === undefined) {\n                taskPrint.project();\n\n            } else if (projectItems[i].project != '') {\n                taskPrint.unpack(projectItems[i]);\n                check = true;\n            }\n        }\n        \n    }\n\n    // controls logic involved in the selection of the All tab. Prints all tasks and projects\n    function allTab(array) {\n        \n        // erases tasks from DOM so they don't spam themselves\n        taskUpdate.erase();\n\n        // searches DOM for .taskSpans elements\n        const text = document.querySelectorAll('.taskSpans');\n\n        // clears them if they are found so they don't spam themselves\n        if (text != null) {\n            taskUpdate.clear();\n        } \n\n        // const targets projectPanel div\n        const projectPanel = document.querySelector('.projectPanel');\n\n        // variable that targets taskPanel div\n        const taskPanel = document.querySelector('.taskPanel');\n\n        // variable for targeting the 'mainSection' div\n        const mainSection = document.querySelector('.mainSection');\n\n        const isPresent = mainSection.contains(projectPanel);\n        // appends projectPanel to section\n\n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n\n\n        let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n\n        if (storedArray != null) {\n            for (var i = 0; i < storedArray.length; i++) {\n                taskPrint.unpack(storedArray[i]);\n            }\n        }\n\n\n    }\n\n    \n\n    return {\n        eventListeners: eventListeners,\n        receive: receiveArrayItems,\n        receiveProjects: receiveProjects,\n        inbox: inboxTab,\n        today: todayTab,\n        weekly: weeklyTab,\n        projects: projectsTab,\n        all: allTab\n    }\n})();\n\n\nwindow.addEventListener('load', () => {\n\n    sideBarHighlight.default();\n    sideBarHighlight.children();\n});\n\n\nexport { sideBarHighlight, tabSelection }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}