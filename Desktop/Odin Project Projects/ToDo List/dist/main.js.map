{"version":3,"sources":["webpack://todo-list/./src/DOM.js","webpack://todo-list/./src/Factory.js","webpack://todo-list/./src/index.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;;;AAGD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD,qDAAqD;;AAErD;AACA;AACA;AACA;AACA,kDAAkD,KAAK;AACvD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA,kDAAkD,KAAK;AACvD;AACA;;AAEA,a;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;;;AAGA;AACA;AACA;AACA,iEAAiE;AACjE;;;AAGA;AACA;AACA;AACA,sEAAsE,cAAc,oBAAoB;AACxG;AACA;;;;AAIA;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;;AAEA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAEqB;;;;;;;;;;;;;;;;;;;ACtTa;AACJ;AAC/B;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,mDAAiB;AACrC,qBAAqB,mDAAiB;AACtC,oBAAoB,kDAAgB;AACpC,uBAAuB,qDAAmB;;AAE1C;AACA;;AAEA;AACA,QAAQ,qDAAiB;AACzB;;AAEA,YAAY;AACZ;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;AC1CuC;;AAExC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,gBAAgB,qDAAW;AAC3B;AACA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIkB;;;;;;;;;UCxHlB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["\nconst generalTask = (function() {\n    \n    \n    // upon click will get task  item\n    function toDoInput(task) {\n        const input = document.querySelector('.task');\n        \n        return input.value;\n    }\n\n    // on click will get notes of todo list item\n    function itemNotes(text) {\n        const notes = document.querySelector('.notes');\n        return notes.value;\n    }\n\n    // on click will get completion date\n    function date(date) {\n        const itemDate = document.querySelector('.date');\n        return itemDate.value;\n    }\n\n    function project(title) {\n        const projectTitle = document.querySelector('.project');\n\n        \n        return projectTitle.value;\n    }\n\n\n    function clearItemData() {\n        const input = document.querySelector('.task');\n        const notes = document.querySelector('.notes');\n        const itemDate = document.querySelector('.date');\n        const projectTitle = document.querySelector('.project');\n\n        input.value = '';\n        notes.value = '';\n        itemDate.value = '';\n        projectTitle.value = '';\n    }\n\n    function sendItemData() {\n        toDoInput();\n        itemNotes();\n        date();\n        project();\n\n    }\n\n    return {\n        title: toDoInput,\n        notes: itemNotes,\n        date: date,\n        project: project,\n        clear: clearItemData,\n        send: sendItemData\n    }\n})()\n\n\n\n\n// Module that prints each task item to UI\nconst taskPrint = (function() {\n\n    // function that calls each appendChild method in order to create the task\n    function printTask() {\n        const taskPanel = document.querySelector('.taskPanel');\n        const item = document.createElement('div');\n            item.classList.add('taskItem');\n            taskPanel.appendChild(item);\n        _printProjectName(item);\n        _printButtons(item);\n        _printTaskName(item);\n        _printTaskDate(item);\n        _printDescription(item);\n    }\n\n                // prints the name of the project\n                function _printProjectName(item) {\n                    const projectName = document.createElement('div');\n\n                    projectName.classList.add('projectName');\n\n                    projectName.textContent = generalTask.project();\n                    if(projectName.textContent === '') {\n                        projectName.textContent = 'Project Name: None';\n                        item.appendChild(projectName);\n                    } else {\n                        item.appendChild(projectName);\n                    }\n                }\n\n                // prints the buttons (delete, complete, edit)\n                function _printButtons(item) {\n                    const itemDelete = document.createElement('button');\n                    itemDelete.classList.add('itemDelete');\n                    itemDelete.textContent = 'D';\n\n                    const completeTask = document.createElement('button');\n                    completeTask.classList.add('completeTask');\n                    completeTask.textContent = 'C';\n                    const completeTaskObject = {};\n                    completeTaskObject.toggle = false;\n                    completeTaskObject.object = completeTask;\n\n                    const editTask = document.createElement('button');\n                    editTask.classList.add('editTask');\n                    editTask.textContent = 'E';\n\n                    item.appendChild(itemDelete);\n                    item.appendChild(completeTask);\n                    item.appendChild(editTask);\n                }\n\n                // prints name of task\n                function _printTaskName(item) {\n                    const taskName = document.createElement('div');\n                    taskName.classList.add('taskName');\n\n                    taskName.textContent = generalTask.title();\n                    item.appendChild(taskName);\n                }\n            \n                // prints task date\n                function _printTaskDate(item) {\n                    const taskDate = document.createElement('div');\n                    taskDate.classList.add('taskDate');\n\n                    taskDate.textContent = generalTask.date();\n                    item.appendChild(taskDate);\n                }\n\n                // prints description / notes for task\n                function _printDescription(item) {\n                    const description = document.createElement('div');\n                    description.classList.add('description');\n\n                    description.textContent = generalTask.notes();\n                    item.appendChild(description);\n                }\n\n    function shareDelete(items) {\n        const deleteButtons = document.querySelectorAll('.itemDelete');\n        console.log(deleteButtons);\n        return deleteButtons;\n    }\n\n    return {\n        print: printTask,\n        share: shareDelete\n    }\n\n})();\n\n\n// module made for editing and interacting with elements\nconst editItems = (function() {\n\n                // variables that target DOM elements for deletion and editing\n                const taskPanel = document.querySelector('.taskPanel');\n\n    // function that houses the event listener for the deleteItem function\n    function buttonEventListeners(event) {\n        // variables that get each nodeList of buttons for interaction\n        const deleteButtons = document.querySelectorAll('.itemDelete');\n        const editButtons = document.querySelectorAll('.editTask');\n        const completeButtons = document.querySelectorAll('.completeTask');\n\n\n        deleteButtons.forEach(button => button.addEventListener('click', _deleteItem));\n        editButtons.forEach(button => button.addEventListener('click', _editTask));\n        completeButtons.forEach(button => button.addEventListener('click', _completeTask));\n    }\n\n            // private function that removes task item nodes from taskPanel\n            function _deleteItem(event){\n                const parent = event.target.parentElement;\n                taskPanel.removeChild(parent);\n            }\n\n            // private function that marks task item as completed\n            function _completeTask() {\n                \n                // variables that fetch and assign the cssText for the clicked completeTask button\n                const parent = event.target.parentElement;\n                const gray = \"filter: grayscale(1);\";\n                const normal = \"filter: grayscale(0);\";\n\n                // switch statement that (based on the cssText of the clicked element) either grays out, or \n                // fills in the taskItem container div\n                switch(true) {\n                    case parent.style.cssText === '':\n                        parent.style.cssText = `${gray}`;\n                    break;\n                    case parent.style.cssText === gray:\n                        parent.style.cssText = `${normal}`;\n                    break;\n                    case parent.style.cssText === normal:\n                        parent.style.cssText = `${gray}`;\n                    break;\n                }\n                \n            }    \n\n            // private function that allows the task info to be edited\n            function _editTask() {\n\n                // variables that get each nodeList item of the specific container the clicked button is in\n                const parent = event.target.parentElement;\n                const project = parent.children[0]\n                const edit = parent.children[3];\n                const name = parent.children[4];\n                const date = parent.children[5];\n                const notes = parent.children[6];\n\n                // IF the edit button is clicked and the task.tagName is still a DIV, then the code runs\n                // ELSE it will run the function called below which appends the newly edited info to the DOM\n                if (name.tagName === 'DIV') {\n                // variables for appending input items to taskItem\n                const editProject = document.createElement('input');\n                    editProject.classList.add('projectName');\n                    editProject.style.cssText = 'text-align: center;';\n                    editProject.placeholder = 'Edit Project Name';\n                    parent.replaceChild(editProject, project);\n\n\n                const editName = document.createElement('input');\n                    editName.classList.add('taskName');\n                    editName.placeholder = 'Edit Task Name';\n                    editName.style.cssText = 'text-align: center;';\n                    parent.replaceChild(editName, name);\n\n\n                const editDate = document.createElement('input');\n                    editDate.classList.add('taskDate');\n                    editDate.type = 'date';\n                    editDate.style.cssText = \"background-color: White; color: black; text-align: center;\";\n                    editDate.placeholder = 'Edit Date';\n                    parent.replaceChild(editDate, date)\n\n\n\n                const editDescription = document.createElement('input');\n                    editDescription.classList.add('description');\n                    editDescription.placeholder = 'Edit Notes';\n                    editDescription.style.cssText = 'text-align: center;';\n                    parent.replaceChild(editDescription, notes);\n\n            // parent.appendChild();\n\n                } else {\n                    _appendTask();\n                }\n            }\n\n            // function that takes newly edited information and publishes them to the DOM\n            function _appendTask() {\n\n                // gets the container of the specific edit button clicked\n                const parent = event.target.parentElement;\n\n                // variables for appending finished items to taskItem\n                const project = parent.children[0]\n                const edit = parent.children[3];\n                const name = parent.children[4];\n                const date = parent.children[5];\n                const notes = parent.children[6];\n                \n\n                const taskName = document.createElement('div');\n                    taskName.classList.add('taskName');\n                    taskName.textContent = name.value;\n\n                const description = document.createElement('div');\n                    description.classList.add('description');\n                    description.textContent = notes.value;\n\n                const taskDate = document.createElement('div');\n                    taskDate.classList.add('taskDate');\n                    taskDate.textContent = date.value;\n\n                const projectName = document.createElement('div');\n                    projectName.classList.add('projectName');\n                    projectName.textContent = project.value;\n\n                parent.replaceChild(projectName, project);\n                parent.replaceChild(taskName, name);\n                parent.replaceChild(taskDate, date);\n                parent.replaceChild(description, notes);\n\n            }\n\n    return {\n        eventListeners: buttonEventListeners\n    }\n})()\n\n\n\nconst submit = document.querySelector('.submit');\nsubmit.addEventListener('click', () => {\n    taskPrint.print();\n    editItems.eventListeners();\n    generalTask.clear();\n\n});\n\nexport { generalTask }\n\n\n","import { generalTask } from \"./DOM\"\nimport {itemRef} from \"./index\"\n// Module that creates each item in the to-do list\n\nconst ItemFactory = (task, notes, date, title) => {\n\n    // create new item factory\n    function createGeneralItem(task, notes, date, title) {\n        const item = {};\n        item.task = generalTask.title(task);\n        item.notes = generalTask.notes(notes);\n        item.date = generalTask.date(date);\n        item.project = generalTask.project(title);\n        \n        _pushItem(item);\n    }\n\n    function _pushItem(item) {\n        itemRef.printItem(item);\n    }\n   \n    return { createGeneralItem }\n}\n\n\n\nconst interactWithDOM = (function() {\n\n    // variable that gets DOM elements\n    const taskPanel = document.querySelector('.taskPanel');\n    const deleteButtons = taskPanel.querySelector('.itemDelete');\n    if (deleteButtons != null) {\n        console.log('what!?');\n        deleteButtons.addEventListener('click', () => {\n            console.log('hey1');\n        });\n    }\n\n    function _deleteItem(event) {\n        console.log('hey');\n    }\n\n})();\n\n\nexport {ItemFactory}","import { ItemFactory } from \"./Factory\";\n\n// This module will be used as the reference interface. It has an array of all todo list items, and \n// functions that break each list item down into its individual peices which can then be accessed as needed\n\nconst itemRef = (function() {\n\n    // array of each task in the list shared by the factory function that made them\n    const itemArray = [];\n\n        // pushes todo item into Item array\n        function pushItem(item) {\n            itemArray.push(item);\n            projectCreate.fetch(item);\n        }\n        \n        // shares specific itemArray\n        function shareArray() {\n            console.log(itemArray);\n            return itemArray;\n        }\n\n    // shares specific item\n    function shareTask(index) {\n        return itemArray[index];\n    }\n\n        // shares specific item name\n        function shareName(index) {\n            return itemArray[index].name;\n        }\n\n        // shares specific item notes\n        function shareNote(index) {\n            return itemArray[index].notes;\n        }\n\n        // shares specific item date\n        function shareSummary(index) {\n            return itemArray[index].date;\n        }\n\n        // shows which project the item belongs to\n        function shareProject(index) {\n           return itemArray[index].project;\n        }\n\n    return {\n        printItem : pushItem,\n        title: shareName,\n        notes: shareNote,\n        summary: shareSummary,\n        notes: shareProject,\n        task: shareTask,\n        share: shareArray\n    }\n})();\n\n// module for creating projects\nconst projectCreate = (function() {\n\n    // array that contains each project\n    const projectArray = [];\n\n    // function that gathers data about each item\n    function fetchItems(item) {\n        const project = {  };\n        project.task = item.task;\n        project.notes = item.notes;\n        project.date = item.date;\n        project.name = item.project;\n\n        projectArray.push(project);\n    }\n\n    // function that shares projectArray\n    function shareProjectArray() {\n        return projectArray;\n    }\n\n    // creates project container for all sub tasks\n    function createProject(item) {\n\n        return item.name;\n\n    }\n\n    return {\n        fetch: fetchItems,\n        shareArray: shareProjectArray,\n        create: createProject\n    }\n})();\n\nconst newItem = ItemFactory();\nconst button = document.querySelector('.submit');\nbutton.addEventListener('click', newItem.createGeneralItem);\n\n\n\nconst itemDel = document.querySelectorAll('.itemDelete');\nconst itemDeleteA = Array.from(itemDel);\n\nitemDel.forEach(button => button.addEventListener('click', (e) => {\n    \n    deleteButton(e);\n    console.log(itemDel);\n    console.log(taskIt);\n}))\n// module that deletes items when delete button is pressed\nfunction deleteButton(e) {\n    \n    console.log(itemDeleteA.indexOf(e.currentTarget));\n    console.log(itemDel);\n    console.log(itemDel);\n    console.log(itemDeleteA);\n}\n\n\n\nexport { itemRef }\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}