{"version":3,"sources":["webpack://todo-list/./src/editTasks.js","webpack://todo-list/./src/grabTask.js","webpack://todo-list/./src/index.js","webpack://todo-list/./src/printTasks.js","webpack://todo-list/./src/taskFactory.js","webpack://todo-list/./src/updateDOM.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAyE;;AAEzE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C;AAC3C,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA,0CAA0C,OAAO;;AAEjD;AACA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA,K;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO,KAAK,WAAW,MAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,QAAQ;AACtH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,4DAA4D;AAC5D;AACA;;;AAGA;AACA;AACA;AACA,yDAAyD;AACzD;;;AAGA;AACA;AACA;AACA,8DAA8D,cAAc,oBAAoB;AAChG;AACA;;;;AAIA;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,kEAA2B;AACvC;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;;;;;;;;;;;;;;;;ACrS0C;AAC/C;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4DAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEkB;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpF4C;AACT;AACG;AACE;AACc;AACb;AACE;AAC3C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;AACA,aAAa;AACb,yCAAyC,MAAM;AAC/C,qDAAqD,EAAE;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,4DAAoB;AAChC;;AAEA;AACA,YAAY,0DAAiB;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAA4B;;AAEpC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,QAAQ,gEAAwB;AAChC,KAAK;;AAEL;AACA;AACA,IAAI,oDAAa;;AAEjB,CAAC;;AAED;AACA,IAAI,gEAAwB;;AAE5B,CAAC;;;;AAID;AACA;AACA;;;AAGsD;;;;;;;;;;;;;;;;;;;;ACpLtD;AACA;AACA;AACA;AACA;;AAE4B;;;AAG5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;ACvLD,CAAsC;AACP;;AAE/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA,QAAQ,qDAAiB;AACzB,QAAQ,qDAAc;AACtB;;AAEA,YAAY;AACZ;;;;;;;;;;;;;;;;;;;;AC7BqC;AACa;AACK;AACE;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,2DAAgB;AACxB;;AAEA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;;AAEA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;;AAEA;AACA,QAAQ,2DAAgB;AACxB;;;AAGA,QAAQ,8DAAkB;AAC1B;AACA;;AAEA;;AAEA;AACA,YAAY,2DAAgB;AAC5B,YAAY,8DAAkB;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA,SAAS;AACT,YAAY,4DAAgB;AAC5B;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;;AAEA;AACA;AACA,CAAC;;;;;;;;UC5LD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["import { itemRef, manipulateTaskArray, projectCreate } from \"./index.js\";\n\n/* \n************************************************************************************\n**********************************EDIT ITEMS MODULE*********************************\n************************************************************************************\n*/\n\n// module made for editing and interacting with each task item\nconst editItems = (function() {\n\n    // variables that target DOM elements for deletion and editing\n    const taskPanel = document.querySelector('.taskPanel');\n\n    // function that houses the event listener for the deleteItem function\n    function buttonEventListeners(event) {\n        // variables that get each nodeList of buttons for interaction\n        const deleteButtons = document.querySelectorAll('.itemDelete');\n        const editButtons = document.querySelectorAll('.editTask');\n        const completeButtons = document.querySelectorAll('.completeTask');\n\n\n        deleteButtons.forEach(button => button.addEventListener('click', _deleteItem));\n        editButtons.forEach(button => button.addEventListener('click', _editTask));     \n        completeButtons.forEach(button => button.addEventListener('click', _completeTask));\n    }\n\n    // private function that removes task item nodes from taskPanel\n    function _deleteItem(event){\n        const parent = event.target.parentElement;\n        taskPanel.removeChild(parent);\n    }\n\n    /* \n    **************************** COMPLETE TASK *******************************    \n    */\n\n    // private function that marks task item as completed\n    function _completeTask() {\n        \n        // variables that fetch and assign the cssText for the clicked completeTask button\n        const parent = event.target.parentElement;\n        const gray = \"filter: grayscale(1);\";\n        const normal = \"filter: grayscale(0);\";\n        \n        // allows us to get index for event target to change status from incomplete to complete or vice versa\n        const taskItems = document.querySelectorAll('.taskItem');\n        const tasks = Array.from(taskItems);\n        // switch statement that (based on the cssText of the clicked element) either grays out, or \n        // fills in the taskItem container div\n        switch(true) {\n            case parent.style.cssText === '':\n                event.target.classList.remove('completeTask');\n                event.target.classList.add('checkedTask');\n                parent.style.cssText = `${gray}`;\n            break;\n            case parent.style.cssText === gray:\n                event.target.classList.remove('checkedTask');\n                event.target.classList.add('completeTask');\n                parent.style.cssText = `${normal}`;\n\n            break;\n            case parent.style.cssText === normal:\n                event.target.classList.remove('completeTask');\n                event.target.classList.add('checkedTask');\n                parent.style.cssText = `${gray}`;\n            break;\n        }\n        completeLocalStorage(parent);\n    }   \n    \n    function completeLocalStorage(parent) {\n\n        // variables for grabbing identification\n       \n        const project = parent.children[0];\n        const name = parent.children[4];\n\n        const keys = Object.keys(localStorage);\n        let i = 0;\n\n        while (i < keys.length) {\n            const items = JSON.parse(localStorage.getItem(keys[i]));\n             if (items.task === name.textContent) {\n                // const oldItems = JSON.parse(localStorage.getItem(keys[i]).key);\n                var key = localStorage.key(i);\n                const newItems = {};\n                newItems.task = items.task;\n                newItems.notes = items.notes;\n                newItems.date = items.date;\n                newItems.project = items.project;\n                newItems.status = 'complete';\n                const newest = JSON.stringify(newItems);\n                localStorage.setItem(key, newest);\n                //  localStorage.setItem(items, `{task:${task}, notes: ${notes}, date: ${date}, ${project}, ${status}}`);\n                 console.log(key);\n             }\n            \n            i++\n        }\n    }\n    /* \n    **************************** EDIT TASK *******************************    \n    */\n\n    // private function that allows the task info to be edited\n    function _editTask() {\n\n        // variables that get each nodeList item of the specific container the clicked button is in\n        const parent = event.target.parentElement;\n        const project = parent.children[0]\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n\n        // IF the edit button is clicked and the task.tagName is still a DIV, then the code runs\n        // ELSE it will run the function called below which appends the newly edited info to the DOM\n        if (name.tagName === 'DIV') {\n        // variables for appending input items to taskItem\n        \n        \n        const editProject = document.createElement('input');\n            editProject.classList.add('projectName');\n            editProject.style.cssText = 'text-align: center;';\n            editProject.placeholder = 'Edit Project Name';\n            parent.replaceChild(editProject, project);\n\n\n        const editName = document.createElement('input');\n            editName.classList.add('taskName');\n            editName.placeholder = 'Edit Task Name';\n            editName.style.cssText = 'text-align: center;';\n            parent.replaceChild(editName, name);\n\n\n        const editDate = document.createElement('input');\n            editDate.classList.add('taskDate');\n            editDate.type = 'date';\n            editDate.style.cssText = \"background-color: White; color: black; text-align: center;\";\n            editDate.placeholder = 'Edit Date';\n            parent.replaceChild(editDate, date)\n\n\n\n        const editDescription = document.createElement('input');\n            editDescription.classList.add('description');\n            editDescription.placeholder = 'Edit Notes';\n            editDescription.style.cssText = 'text-align: center;';\n            parent.replaceChild(editDescription, notes);\n\n            event.target.classList.remove('editTask');\n            event.target.classList.add('editingTask');\n    // parent.appendChild();\n        \n        } else {\n            _appendTask();\n        }\n    }\n\n    /* \n    ************************************************************************************\n    **********************************APPEND EACH TASK AFTER EDIT***********************\n    ************************************************************************************\n    */\n\n\n    // function that takes newly edited information and publishes them to the DOM\n    function _appendTask() {\n\n        // variable for grabbing all task items\n        const taskItems = document.querySelectorAll('.taskItem');\n        const tasks = Array.from(taskItems);\n\n        event.target.classList.remove('editingTask');\n        event.target.classList.add('editTask');\n\n        // gets the container of the specific edit button clicked\n        const parent = event.target.parentElement;\n\n        // variables for appending finished items to taskItem\n        const project = parent.children[0]\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n        \n\n        const taskName = document.createElement('div');\n            taskName.classList.add('taskName');\n            taskName.textContent = name.value;\n\n        const description = document.createElement('div');\n            description.classList.add('description');\n            description.textContent = notes.value;\n\n        const taskDate = document.createElement('div');\n            taskDate.classList.add('taskDate');\n            taskDate.textContent = date.value;\n\n        const projectName = document.createElement('div');\n            projectName.classList.add('projectName');\n            projectName.textContent = project.value;\n\n        parent.replaceChild(projectName, project);\n        parent.replaceChild(taskName, name);\n        parent.replaceChild(taskDate, date);\n        parent.replaceChild(description, notes);\n\n        // variable that fetches index of edited element\n        const index = tasks.indexOf(parent);\n\n        grabEditedTask.newTask(event.target, name.value, notes.value, date.value, project.value, status, index);\n    }\n\n    \n\n    function projectArray() {\n\n    }\n\n    return {\n    eventListeners: buttonEventListeners\n\n    }\n\n})();\n\n    /* \n    ************************************************************************************\n    **********************************GRAB EDITED TASK**********************************\n    ************************************************************************************\n    */\n\n    // module that grabs edited task info and communicates that changes were made\n    const grabEditedTask = (function() {\n\n        /* \n            there should be a way to track back to the orignial array in index.js when you edit\n            it'll figure out which index the edited item belongs to, determine if it has a project\n            and rewrite that information. Keeping it's place in the array index, but updating it\n        */\n        // variables that grab specific task that is edited\n\n        function receiveEditedTask(target, task, notes, date, project, status, index) {\n            const editedTask = {};\n            editedTask.name = task,\n            editedTask.notes = notes,\n            editedTask.date = date,\n            editedTask.project = project,\n            editedTask.status = status,\n            _updateArrays(editedTask, index)\n        }\n\n        function _updateArrays(task, index) {\n            manipulateTaskArray.replace(task, index)\n        }\n\n        return {\n            newTask: receiveEditedTask\n        }\n    })();\n\n    const deleteButton = document.querySelector('.formDelete');\n        deleteButton.addEventListener('click', () => {\n    })\n\n     /* \n    ************************************************************************************\n    **********************************MODULE FOR DELETING EVERY ITEM********************\n    ************************************************************************************\n    */\n\n    const taskUpdate = (function() {\n\n        // variable that grabs task container & tasks\n        const mainSection = document.querySelector('.mainSection');\n        const taskPanel = document.querySelector('.taskPanel');\n        const allItems = taskPanel.children;\n        // function that erases all tasks from panel\n\n        function eraseTasks() {\n            var child = taskPanel.lastElementChild; \n            while (child) {\n                taskPanel.removeChild(child);\n                child = taskPanel.lastElementChild;\n            }\n\n        }\n\n        return {\n            erase: eraseTasks\n        }\n    })();\n\nexport { editItems, taskUpdate }","import { ItemFactory } from \"./taskFactory.js\";\n/* \n************************************************************************************\n***************** MODULE THAT GRABS INFO FOR TASKS FROM INPUT FIELDS ***************\n************************************************************************************\n*/\n\nconst grabTask = (function() {\n    \n    \n    // upon click will get task  item\n    function toDoInput() {\n        const input = document.querySelector('.task');\n        \n        return input.value;\n    }\n\n    // on click will get notes of todo list item\n    function itemNotes() {\n        const notes = document.querySelector('.notes');\n        return notes.value;\n    }\n\n    // on click will get completion date\n    function itemDate() {\n        const itemDate = document.querySelector('.date');\n        return itemDate.value;\n    }\n\n    function itemProject() {\n        const projectTitle = document.querySelector('.project');\n\n        \n        return projectTitle.value;\n    }\n\n\n    function clearItemData() {\n        const input = document.querySelector('.task');\n        const notes = document.querySelector('.notes');\n        const itemDate = document.querySelector('.date');\n        const projectTitle = document.querySelector('.project');\n\n        input.value = '';\n        notes.value = '';\n        itemDate.value = '';\n        projectTitle.value = '';\n    }\n\n    function sendItemData() {\n       \n        const taskName = toDoInput();\n        const notes = itemNotes();\n        const date = itemDate();\n        const project = itemProject();\n        const status = 'incomplete'\n       \n       const sendGrabbedData = ItemFactory();\n       sendGrabbedData.receiveTasks(taskName, notes, date, project, status);\n    }\n\n    return {\n        title: toDoInput,\n        notes: itemNotes,\n        itemDate: itemDate,\n        itemProject: itemProject,\n        clear: clearItemData,\n        send: sendItemData\n    }\n})()\n\nexport { grabTask }\n\n// Also, I'm trying to figure out how I'm to separate each thing into an array based on \n                        // projects\n                        // weeks the project is intended for\n                        // all projects\n                        // projects due today\n                        // I need to learn what the inbox feature is intended for..\n\n// I also need to learn about webpack, and how I'm to get each module up and running, completely\n// functioning. This will take a lot of time, but in the end it WILL save me a lot of time \n// if I completely learn and understand how it works. Most of my issues during this project have been\n// almost entirely from not completely understanding how webpack works\n// actually it has accounted for probably well over 65% of the time spent on this project\n","import { ItemFactory } from \"./taskFactory\";\nimport  exampe  from \"./updateDOM\";\nimport { grabTask } from \"./grabTask\";\nimport { editItems } from \"./editTasks\";\nimport { tabbedPrint, taskPrint } from \"./printTasks\";\nimport { sidebarTab } from \"./updateDOM\";\nimport { tabSelection } from \"./updateDOM\";\n// This module will be used as the reference interface. It has an array of all todo list items, and \n// functions that break each list item down into its individual peices which can then be accessed as needed\n\nconst itemRef = (function() {\n\n    // array of each task in the list shared by the factory function that made them\n    const itemArray = [];\n        // pushes todo item into Item array & other functions inside the itemRef Module\n        function pushItem(item) {\n\n            itemArray.push(item);\n            const index = itemArray.indexOf(item);\n            let myItem = JSON.stringify(item);\n            shareItem(item, index);\n            shareArrayItems(item, index, 'index');\n            // unsure what I will do with this call\n            if (item.project != '') {\n                projectCreate.fetch(item);\n                console.log(myItem);                \n            } else {\n                localStorage.setItem(`T${index}`, myItem);\n                console.log(localStorage.getItem(`T${2}`.status));\n            }\n        }\n \n        function arrayShare(item) {\n            console.log(itemArray.indexOf(item));\n            return itemArray;\n        }\n\n        // shares specific itemArray\n        function shareArrayItems(item, index, page) {\n            tabSelection.receive(item, index, page);\n        }\n\n        function shareItem(item, index) {\n            taskPrint.receive(item, index);\n\n        }\n\n    // shares specific item\n    function shareTask(index) {\n        console.log('sharing task');\n        console.log(itemArray[index])\n        return itemArray[index];\n    }\n\n        // shares specific item name\n        function shareName(index) {\n            return itemArray[index].name;\n        }\n\n        // shares specific item notes\n        function shareNote(index) {\n            return itemArray[index].notes;\n        }\n\n        // shares specific item date\n        function shareSummary(index) {\n            return itemArray[index].date;\n        }\n\n        // shows which project the item belongs to\n        function shareProject(index) {\n           return itemArray[index].project;\n        }\n\n        function localStore() {\n            const myStorage = window.localStorage;\n            return myStorage;\n        }\n\n    return {\n        printItem : pushItem,\n        arrayShare: arrayShare,\n        title: shareName,\n        notes: shareNote,\n        summary: shareSummary,\n        notes: shareProject,\n        task: shareTask,\n        share: shareArrayItems,\n        shareItem: shareItem,\n        localStore: localStore\n    }\n})();\n\n\n// Module for array manipulation \nconst manipulateTaskArray = (function() {\n    \n\n    function _grabArray() {\n        const itemArray = itemRef.arrayShare();\n        console.log(itemArray);\n        return itemArray;\n       \n    }\n\n    function replaceItem(item, index) {\n        const itemArray = _grabArray();\n        itemArray.splice(index, 1, item);\n        console.log(itemArray);\n    }\n\n    return {\n        replace: replaceItem\n    }\n})();\n\n\n\n// module for creating projects\nconst projectCreate = (function() {\n\n    // array that contains each project\n    const projectArray = [];\n\n    // function that gathers data about each item\n    function fetchItems(item) {\n        const project = {  };\n        project.task = item.task;\n        project.notes = item.notes;\n        project.date = item.date;\n        project.project = item.project;\n        project.status = 'unfinished';\n        tabSelection.receiveProjects(project);\n\n        projectArray.push(project);\n        const index = projectArray.indexOf(project);\n        \n    }\n\n    // function that shares projectArray\n    function shareProjectArray() {\n        return projectArray;\n    }\n\n    // creates project container for all sub tasks\n    function createProject(project) {\n        \n\n    }\n\n    return {\n        fetch: fetchItems,\n        shareArray: shareProjectArray,\n        create: createProject\n    }\n})();\n\n// keeps all event listeners active\nconst sidebar = document.querySelector('.sidebar');\n    sidebar.addEventListener('click', () => {\n        editItems.eventListeners();\n    })\n\nconst submit = document.querySelector('.submit');\nsubmit.addEventListener('click', () => {\n    grabTask.send();\n\n});\n\nwindow.addEventListener('load', () => {\n    editItems.eventListeners();\n\n})\n\n\n\n/* \n    I need there to be a way to communicate with\n*/\n\n\nexport { itemRef, projectCreate, manipulateTaskArray }\n\n\n","\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS INFO TO DOM*****************************\n************************************************************************************\n*/\n\nimport { itemRef } from \".\";\n\n\n// Module that prints each task item to UI\nconst taskPrint = (function() {\n    // variables for task parent\n    const taskPanel = document.querySelector('.taskPanel');\n    let item = document.querySelector('.taskItem');\n\n    function receiveLocalStorage(archive) {\n        console.log(archive);\n    }\n\n    function receiveItem(item, index) {\n        // calls unpackItem to breakdown each item key\n        unpackItem(item, index);\n        console.log(index);\n    }\n\n    // takes item and breaks it down into each part\n    function unpackItem(item, index, status) {\n        const task = {};\n        task.task = item.task;\n        task.notes = item.notes;\n        task.date = item.date;\n        task.project = item.project;\n        task.status = status;\n        printTask(task, index, status);\n        console.log(task, index);\n    }\n\n    // function that calls each appendChild method in order to create the task\n    function printTask(task, index, status) {\n        const item = document.createElement('div');\n        item.classList.add('taskItem');\n        \n        // appends taskItem container DIV to task item section\n        taskPanel.appendChild(item);\n\n        _printProjectName(item, task.project);\n        _printButtons(item);\n        _printTaskName(item, task.task);\n        _printTaskDate(item, task.date);\n        _printDescription(item, task.notes);\n        // shareTaskItem(item);\n        // itemRef.share(); // not sure why this was here?\n        // createItemObject(item);\n        console.log(status);\n    }\n\n    // function that returns taskObjects array\n    function createItemObject(item) {\n        \n        // if (typeof item != 'undefined') {\n        //     const task = {};\n        //     task.project = item.children[0].textContent;\n        //     task.taskName = item.children[4].textContent;\n        //     task.date = item.children[5].textContent;\n        //     task.notes = item.children[6].textContent;\n        //     taskObjects.push(task);\n        //     console.log(task)\n        // } else {\n        //     console.log(taskObjects);\n        //     return task\n        // }\n        return item\n    }\n    \n        // variable for task container\n                // prints the name of the project\n                function _printProjectName(item, project) {\n\n                    const projectName = document.createElement('div');\n\n                    projectName.classList.add('projectName');\n\n                    projectName.textContent = project;\n                    if(projectName.textContent === '') {\n                        projectName.textContent = 'Project Name: None';\n                        item.appendChild(projectName);\n                    } else {\n                        item.appendChild(projectName);\n                    }\n                }\n\n                // prints the buttons (delete, complete, edit)\n                function _printButtons(item) {\n\n                    const completeTask = document.createElement('button');\n                    completeTask.classList.add('completeTask');\n                    completeTask.title = \"Complete Task\";\n                    // const completeTaskObject = {};\n                    // completeTaskObject.toggle = false;\n                    // completeTaskObject.object = completeTask;\n\n                    const editTask = document.createElement('button');\n                    editTask.classList.add('editTask');\n                    editTask.title = 'Edit Task'\n\n                    const itemDelete = document.createElement('button');\n                    itemDelete.classList.add('itemDelete');\n                    itemDelete.title = 'Delete Task'\n\n                    item.appendChild(completeTask);\n                    item.appendChild(editTask);\n                    item.appendChild(itemDelete);\n                }\n\n                // prints name of task\n                function _printTaskName(item, task) {\n                    const taskName = document.createElement('div');\n                    taskName.classList.add('taskName');\n\n                    taskName.textContent = task;\n                    item.appendChild(taskName);\n                }\n            \n                // prints task date\n                function _printTaskDate(item, date) {\n                    const taskDate = document.createElement('div');\n                    taskDate.classList.add('taskDate');\n\n                    taskDate.textContent = date;\n                    item.appendChild(taskDate);\n                }\n\n                // prints description / notes for task\n                function _printDescription(item, notes) {\n                    const description = document.createElement('div');\n                    description.classList.add('description');\n\n                    description.textContent = notes;\n                    item.appendChild(description);\n                }\n\n\n            \n\n    return {\n        localStore: receiveLocalStorage,\n        receive: receiveItem,\n        unpack: unpackItem,\n        print: printTask,\n        createArray: createItemObject\n    }\n\n})();\n\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS TAB SPECIFIC CONTENT********************\n************************************************************************************\n*/\n\nconst tabbedPrint = (function() {\n    const myStorage = window.localStorage;\n    // breaks down each array sent into it's individual items\n    function arrayUnpack(array) {\n        for (var i = 0; i < array.length; i++) {\n           \n            _arrayItem(array[i]);\n        }\n    }\n\n    function _arrayItem(index) {\n        const project = {};\n        project.task = index.task;\n        project.notes = index.notes;\n        project.date = index.date;\n        project.project = index.project;\n        taskPrint.unpack(project);\n    }\n\n    return {\n        unpack: arrayUnpack\n    }\n})();\n\n\n\nexport { taskPrint, tabbedPrint }"," import { grabTask } from \"./grabTask\"\nimport {itemRef} from \"./index\"\n\n// Module that turns task data into an object\nconst ItemFactory = () => {\n\n    // receiving function that breaks down each task item and sends it onward\n    function receiveTasks(taskName, notes, date, project, status) {\n        \n        const item = {\n           task: taskName,\n           notes: notes,\n           date: date,\n           project: project, \n           status: status\n        }\n\n       \n        _pushItem(item);\n      \n    }\n\n    // pushes each task into index.js where it is added to the taskArray\n    function _pushItem(item) {\n        itemRef.printItem(item);\n        grabTask.clear();\n    }\n   \n    return { receiveTasks }\n}\n\nexport {ItemFactory}","import { itemRef } from \"./index.js\";\nimport { formatDistance, subDays } from 'date-fns'\nimport { editItems, taskUpdate } from \"./editTasks.js\";\nimport { taskPrint, tabbedPrint } from \"./printTasks.js\";\n/* \n************************************************************************************\n****************************CONTROLS WHICH SIDEBAR IS LIT UP************************\n************************************************************************************\n*/\n\n// module that tracks which sidebar panel is interacted with, and then passes that info on\n// so the data corresponding with that tab can be displayed in the DOM\nconst sideBarHighlight = (function() {\n\n    // variables for targeting each tab\n    const sideBarChildren = document.querySelector('.sidebar').children;\n    // each tab element\n    const child1 = sideBarChildren[0];\n    const child2 = sideBarChildren[1];\n    const child3 = sideBarChildren[2];\n    const child4 = sideBarChildren[3];\n    const child5 = sideBarChildren[4];\n\n    // array to contain sidebar tabs\n    const sideBarArray = [];\n    sideBarArray.push(child1, child2, child3, child4, child5);\n\n    function defaultTab() {\n        const all = document.querySelector('.all');\n        all.classList.add('hovered');\n        operator(4);\n    }\n\n    // function that highlights the tab that is clicked and unhighlights the tabs that aren't\n    function sideBarEventListeners() {\n\n        sideBarArray.forEach(tab => tab.addEventListener('click', () => {\n            const index = sideBarArray.indexOf(event.target);\n\n            switch(true) {\n                case event.target.classList.contains('hovered'):\n                    event.target.classList.remove('hovered');\n                    defaultTab();\n                break;\n                case !event.target.classList.contains('hovered'):\n                    child1.classList.remove('hovered');\n                    child2.classList.remove('hovered');\n                    child3.classList.remove('hovered');\n                    child4.classList.remove('hovered');\n                    child5.classList.remove('hovered');\n                    event.target.classList.add('hovered');\n                    operator(index);\n                break;\n            }\n\n            const hover = document.querySelector('.hovered');\n            \n\n        }))\n    }\n\n    // shares the array that contains each sidebar element\n    function shareTabs() {\n        return sideBarChildren;\n    }\n\n    return {\n        default: defaultTab,\n        children: sideBarEventListeners,\n        share: shareTabs\n    }\n})();\n\n// function that calls functions in the 'tabSelection' module based on which tab is clicked\nfunction operator(index) {\n    switch(true) {\n        case index === 0:\n           tabSelection.inbox();\n        break;\n        case index === 1:\n            tabSelection.today();\n        break;\n        case index === 2:\n            tabSelection.weekly();\n        break;\n        case index === 3:\n            tabSelection.projects();\n        break;\n        case index === 4:\n            tabSelection.all();\n        break;\n    }\n}\n\n/* \n************************************************************************************\n****************************MODULE THAT CONTROLS EACH TAB***************************\n************************************************************************************\n*/\n\n// runs logic for each tab based on which tab is clicked\nconst tabSelection = (function() {\n\n    const projectArray = [];\n    const itemArray = [];\n\n    function receiveProjects(project) {\n        projectArray.push(project);\n       \n    }\n\n    function receiveArrayItems(item, index, page) {\n       \n        switch(true) {\n            case page === 'index':\n                itemArray.push(item);\n            break;\n        }\n    }\n    // functions for each tab\n\n    function inboxTab() {\n        taskUpdate.erase();\n    }\n\n    function todayTab() {\n        taskUpdate.erase();\n        console.log(1);\n        // whatever taks are dated for today show up in the DOM\n    }\n\n    function weeklyTab() {\n        taskUpdate.erase();\n        console.log(2);\n        // whatever tasks happen this week show up in the DOM\n    }\n\n    function projectsTab() {\n        taskUpdate.erase();\n        console.log(3);\n\n\n        tabbedPrint.unpack(projectArray);\n        // tasks associated with certain projects will show up in the DOM\n    }\n\n    function allTab(array) {\n        \n        if (itemArray.length != 0) {\n            taskUpdate.erase();\n            tabbedPrint.unpack(itemArray);\n        }\n\n        const keys = Object.keys(localStorage);\n        let i = 0;\n\n    while (i != keys.length) {\n        const items = JSON.parse(localStorage.getItem(keys[i]));\n        if (items.status === 'complete') {\n            taskPrint.unpack(items, [i], 'complete');\n            i++\n        } else if (items.status === 'incomplete') {\n            taskPrint.unpack(items, [i], 'incomplete');\n            i++\n        }\n\n    }\n\n\n\n    }\n\n    return {\n        receive: receiveArrayItems,\n        receiveProjects: receiveProjects,\n        inbox: inboxTab,\n        today: todayTab,\n        weekly: weeklyTab,\n        projects: projectsTab,\n        all: allTab\n    }\n})();\n\n\nwindow.addEventListener('load', () => {\n    \n    sideBarHighlight.default();\n    sideBarHighlight.children();\n});\n\nexport { sideBarHighlight, tabSelection }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}