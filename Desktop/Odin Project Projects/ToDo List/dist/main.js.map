{"version":3,"sources":["webpack://todo-list/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://todo-list/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://todo-list/./node_modules/date-fns/esm/isSameDay/index.js","webpack://todo-list/./node_modules/date-fns/esm/isSameWeek/index.js","webpack://todo-list/./node_modules/date-fns/esm/isThisWeek/index.js","webpack://todo-list/./node_modules/date-fns/esm/isToday/index.js","webpack://todo-list/./node_modules/date-fns/esm/parseISO/index.js","webpack://todo-list/./node_modules/date-fns/esm/startOfDay/index.js","webpack://todo-list/./node_modules/date-fns/esm/startOfWeek/index.js","webpack://todo-list/./node_modules/date-fns/esm/toDate/index.js","webpack://todo-list/./src/editTasks.js","webpack://todo-list/./src/grabTask.js","webpack://todo-list/./src/index.js","webpack://todo-list/./src/printTasks.js","webpack://todo-list/./src/project.js","webpack://todo-list/./src/taskFactory.js","webpack://todo-list/./src/updateDOM.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACJe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;;ACZgD;AACS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,mEAAY;AACd,2BAA2B,6DAAU;AACrC,4BAA4B,6DAAU;AACtC;AACA,C;;;;;;;;;;;;;;;;AC9BkD;AACO;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO,kEAAkE;AACpF,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACe;AACf,EAAE,mEAAY;AACd,4BAA4B,8DAAW;AACvC,6BAA6B,8DAAW;AACxC;AACA,C;;;;;;;;;;;;;;;;AC1CgD;AACS;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO,kEAAkE;AACpF,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACe;AACf,EAAE,mEAAY;AACd,SAAS,6DAAU;AACnB,C;;;;;;;;;;;;;;;;ACzC8C;AACW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,mEAAY;AACd,SAAS,4DAAS;AAClB,C;;;;;;;;;;;;;;;;AC/BmD;AACM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE;AACxE,sBAAsB,EAAE,sBAAsB,EAAE,wBAAwB,EAAE;AAC1E,gCAAgC,EAAE,UAAU,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;;AAEe;AACf,EAAE,mEAAY;AACd;AACA,wFAAwF,gEAAS;;AAEjG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,EAAE,SAAS,+BAA+B,OAAO,EAAE,SAAS,+BAA+B;AAC9H,yCAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;;;;;AClSwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,mEAAY;AACd,aAAa,yDAAM;AACnB;AACA;AACA,C;;;;;;;;;;;;;;;;;AC9BwC;AACW;AACM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO,kEAAkE;AACpF,WAAW,cAAc;AACzB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,kBAAkB;AAClF;AACA;;AAEe;AACf,EAAE,mEAAY;AACd;AACA;AACA;AACA,6DAA6D,gEAAS;AACtE,0EAA0E,gEAAS,uBAAuB;;AAE1G;AACA;AACA;;AAEA,aAAa,yDAAM;AACnB;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACrDyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,mEAAY;AACd,wDAAwD;;AAExD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,uKAAuK;;AAEvK;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;ACnDyC;AACD;AAC8B;AAC1B;AACgB;AAC5D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,SAAS,G;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yDAAkB;;AAEtD;AACA,oBAAoB,mEAAuB;AAC3C,oBAAoB,qDAAc;AAClC,kD;AACA,qD;AACA,iBAAiB;AACjB;AACA;AACA,oCAAoC,yDAAkB;;;AAGtD;AACA,oBAAoB,mEAAuB;AAC3C,oBAAoB,qDAAc;AAClC,kD;AACA,qD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;;;;AAKA,4BAA4B,8DAAmB;AAC/C,0D;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,qD;AACA,wD;AACA,iBAAiB;;;;AAIjB;AACA;;AAEA;;AAEA,4BAA4B,8DAAmB;AAC/C,0D;;;AAGA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,uBAAuB,kBAAkB;AACzC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,uBAAuB,kBAAkB;;AAEzC;AACA;;AAEA;;AAEA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,2CAA2C;AAC3C;;AAEA;AACA;AACA,gCAAgC,KAAK;AACrC,K;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;;AAEA;AACA;AACA;AACA;;AAEA,oCAAoC,0BAA0B;AAC9D;AACA;AACA,4BAA4B,8DAAmB;AAC/C;AACA;AACA,iBAAiB;;AAEjB,oBAAoB,qDAAc;AAClC;AACA;AACA,gEAAgE;AAChE;AACA;AACA,0CAA0C,OAAO;AACjD;;;AAGA;AACA;;AAEA,oCAAoC,0BAA0B;AAC9D;AACA;;AAEA,4BAA4B,8DAAmB;AAC/C;AACA;AACA,iBAAiB;AACjB,4BAA4B,8DAAmB;;AAE/C,oBAAoB,8DAAmB;AACvC,iBAAiB;;AAEjB,oBAAoB,qDAAc;AAClC;;AAEA;AACA,gEAAgE;AAChE;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA,gBAAgB,qDAAc;AAC9B;AACA;AACA;AACA,K;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO,KAAK,WAAW,MAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,QAAQ;;AAEtH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,gCAAgC,qBAAqB;AACrD;;AAEA;;AAEA,wCAAwC,yBAAyB;AACjE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,6BAA6B;AACpD;;AAEA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D;AAC7D;;;AAGA;AACA;AACA;AACA,kEAAkE,cAAc,oBAAoB;AACpG;AACA;;;;AAIA;AACA;AACA;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,SAAS;;AAET;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAe;;AAEvB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,gBAAgB,6DAAkB;AAClC;;AAEA;AACA,gBAAgB,8DAAmB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;;AAGA,2BAA2B,6BAA6B;AACxD;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE;AAChE;AACA;;;AAGA;AACA;AACA;AACA,6DAA6D;AAC7D;;;AAGA;AACA;AACA;AACA,kEAAkE,cAAc,oBAAoB;AACpG;AACA;;;;AAIA;AACA;AACA;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;;AAEA,aAAa,O;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,qDAAc;;AAEtB;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;;;AAGA;;AAEA;AACA;AACA,8DAA8D,QAAQ;AACtE,kCAAkC,QAAQ;;AAE1C,iBAAiB;;AAEjB,wCAAwC,QAAQ;AAChD;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,qDAAc;AAC1B;;AAEA;AACA;AACA;AACA,KAAK;;;;AAIL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,wDAAe;AAC3B;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,kBAAkB;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;;;;;;;;;;;;;;;;;;ACp3BuC;AACmB;AACvB;AACxC;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA,0B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,+DAAc;AACrD;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,mCAAmC,+DAAc;AACjD;AACA;;AAEA;AACA;;AAEA,4CAA4C,4DAAW;AACvD;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB;;AAEjB,wCAAwC,QAAQ;AAChD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEkB;;;;;;;;;;;;;;;;;;;;;;;;AC5IyB;AACS;AACf;AACc;AACE;AACb;AACE;AACN;AACA;AACrC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,wBAAwB,2DAAmB;AAC3C,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,4DAAoB;AAChC;;AAEA;AACA;AACA;;AAEA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb,gBAAgB,0DAAiB;AACjC;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,YAAY,gEAAwB;AACpC,SAAS;;AAET;AACA;AACA;AACA,QAAQ,oDAAa;AACrB,QAAQ,4DAAoB;AAC5B;AACA,YAAY,0DAAiB;AAC7B,S;;;;AAIA,QAAQ,gEAAwB;;AAEhC,KAAK;;AAEL;AACA,QAAQ,gEAAwB;AAChC,QAAQ,mEAA2B;AACnC;AACA,QAAQ,qDAAe;;AAEvB,KAAK;;;;AAIL;AACA;AACA;;;AAGmD;;;;;;;;;;;;;;;;;;;;;;;AC9OnD;AACA;AACA;AACA;AACA;;AAE2C;AACS;AACf;AACwB;;;AAG7D;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB,0DAAkB;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,0DAAkB;AAC9C;;AAEA;;AAEA;AACA,oBAAoB,0DAAkB;AACtC;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA,QAAQ,wDAAgB;;AAExB;;AAEA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,yBAAyB;;AAEpD;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAAS;AACT;;AAEA,0BAA0B,qBAAqB;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,mEAA2B;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,+BAA+B,KAAK;;AAEpC;;;;;AAKA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,kBAAkB;;AAEzC;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC7TA;AACA;AACA;AACA;AACA;;AAEyC;AACE;;AAE3C;AACA;;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,wBAAwB;;AAEvD;;AAEA;AACA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;;;AAGA;;;AAGA,wBAAwB,wBAAwB;AAChD;;AAEA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,+DAAsB;;AAElC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA,SAAS;;;AAGT;AACA;;AAEA;;AAEA;AACA;AACA,YAAY,gEAAuB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;;;;ACvJD,CAAsC;AACK;AACP;;AAEpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qC;AACA,SAAS;;AAET,YAAY,qDAAiB;AAC7B;;AAEA;;AAEA,YAAY;AACZ;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,oDAAgB,cAAc,oDAAgB,kB;AAC1D,2BAA2B,KAAK,oDAAgB,UAAU;AAC1D,oBAAoB,oDAAgB;AACpC,kC;AACA,sCAAsC,oDAAgB;AACtD;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA,gBAAgB,kDAAY;AAC5B;AACA,aAAa;AACb;AACA,gBAAgB,wDAAkB;AAClC;AACA;;AAEA,SAAS,UAAU,oDAAgB,eAAe,oDAAgB;;AAElE;AACA,YAAY,wDAAkB;AAC9B;;;;AAIA;;AAEA,YAAY;AACZ;;;;AAIoC;;AAEpC;AACA;AACA;AACA;AACA;AACA,G;;;;;;;;;;;;;;;;;;;;;;;ACxHiD;AACW;AACL;AACE;AACjB;AACH;AACF;AACG;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,qE;AACA;AACA,0B;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,QAAQ,2DAAgB;;AAExB;AACA;;AAEA;AACA;AACA,YAAY,2DAAgB;AAC5B,S;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;AACA,QAAQ,2DAAgB;;AAExB;AACA;AACA;;AAEA;;AAEA;;AAEA,wBAAwB,kBAAkB;;AAE1C,yBAAyB,iDAAO,GAAG,iDAAQ;;AAE3C;AACA,gBAAgB,2DAAe;;AAE/B,gBAAgB,2DAAgB;AAChC,a;;AAEA;;AAEA,wBAAwB,yBAAyB;AACjD,2BAA2B,4BAA4B;AACvD,6BAA6B,iDAAO,CAAC,iDAAQ;;AAE7C;AACA,oBAAoB,2DAAe;AACnC,oBAAoB,2DAAgB;AACpC;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA,QAAQ,2DAAgB;;AAExB;AACA;;AAEA;AACA;AACA,YAAY,2DAAgB;AAC5B,S;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;;AAEA,QAAQ,2DAAgB;;AAExB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,0BAA0B,KAAK,IAAI,MAAM,IAAI,IAAI;;AAEjD;;AAEA,yBAAyB,kBAAkB;;AAE3C,0BAA0B,iDAAU,GAAG,iDAAQ;;;;AAI/C;AACA,iBAAiB,2DAAe;;AAEhC,iBAAiB,2DAAgB;AACjC,c;;AAEA;;AAEA,yBAAyB,yBAAyB;AAClD,4BAA4B,4BAA4B;AACxD,8BAA8B,iDAAU,GAAG,iDAAQ;;AAEnD;AACA,qBAAqB,2DAAe;AACpC,qBAAqB,2DAAgB;AACrC;AACA;;AAEA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,YAAY,2DAAgB;AAC5B,S;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA,yBAAyB,yBAAyB;AAClD;AACA;;AAEA;;AAEA;AACA;;AAEA,QAAQ,2DAAgB;AACxB,OAAO,6DAAiB;;AAExB;;AAEA;AACA;;;AAGA;AACA,QAAQ,2DAAgB;;AAExB;AACA;;AAEA;AACA;AACA,YAAY,2DAAgB;AAC5B,S;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,S;;;AAGA;;AAEA;AACA,2BAA2B,wBAAwB;;AAEnD;AACA,oBAAoB,4DAAgB;;AAEpC,iBAAiB;;AAEjB;AACA;AACA;;;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ,2DAAgB;AACxB;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA,YAAY,kEAAsB;AAClC;AACA;;AAEA;;;AAGA,QAAQ,wDAAe;;AAEvB;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,gCAAgC,6BAA6B;AAC7D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;;;AAGA,yCAAyC,uDAAgB;;AAEzD;;AAEA,wBAAwB,wDAAe;;AAEvC;AACA;;;;;;AAMA,mCAAmC,kBAAkB;AACrD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,wBAAwB,sBAAsB;AAC9C;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA,mCAAmC,kBAAkB;;;AAGrD;AACA;AACA,0CAA0C,+BAA+B;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;;AAEA;AACA;AACA,CAAC;;;;;;;;;UC1qBD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week?\n *\n * @description\n * Are the given dates in the same week?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the dates are in the same week\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n */\nexport default function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","import isSameWeek from \"../isSameWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @param {Object} [options] - the object with options\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the date is in this week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\nexport default function isThisWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return isSameWeek(dirtyDate, Date.now(), options);\n}","import isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import { grabTask } from \"./grabTask.js\";\nimport { projects } from \"./project.js\";\nimport { itemRef, manipulateTaskArray, getProject } from \"./index.js\";\nimport { taskPrint } from \"./printTasks.js\";\nimport { projectPrint, tabSelection } from \"./updateDOM.js\";\n/* \n************************************************************************************\n**********************************EDIT ITEMS MODULE*********************************\n************************************************************************************\n*/\n\n// module made for editing and interacting with each task item\nconst editItems = (function() {\n\n    // array for replacing .textSpans items\n    let newTextArray = [];\n\n    // variables for the locallyStored projectArray\n    const projectPanel = document.querySelector('.projectPanel');\n    const projectS = JSON.parse(localStorage.getItem('projectArray'));\n    // variables that target DOM elements for deletion and editing\n    const taskPanel = document.querySelector('.taskPanel');\n\n    // function that houses the event listener for the deleteItem function\n    function buttonEventListeners(event) {\n        // variables that get each nodeList of buttons for interaction\n        const deleteButtons = document.querySelectorAll('.itemDelete');\n        const editButtons = document.querySelectorAll('.editTask');\n        const completeButtons = document.querySelectorAll('.completeTask');\n        const checkedButtons = document.querySelectorAll('.checkedTask');\n\n\n        deleteButtons.forEach(button => button.addEventListener('click', _deleteItem));\n        editButtons.forEach(button => button.addEventListener('click', () => {\n            const projectPanel = document.querySelector('.projectPanel');\n            if(projectPanel === null ) {\n                _editTask() \n            } else if (projectPanel != null) {\n                _editProject ();\n            }\n\n        }));     \n        completeButtons.forEach(button => button.addEventListener('click', _completeTask));\n        checkedButtons.forEach(button => button.addEventListener('click', _completeTask));\n    }\n\n    // private function that removes task item nodes from taskPanel\n    function _deleteItem(event) {\n        // variables that grab each parent + task to pinpoint the index of said task\n        const parent = event.target.parentElement;\n        const task = parent.children[4].textContent;\n        const project = parent.children[0].textContent;\n        const action = 'delete';\n        const parentGroup = document.querySelectorAll('.taskItem');\n        const projectPanel = document.querySelector('.projectPanel');\n        let index = undefined;\n\n        // variable for task index\n        if (project === '') {\n            index = searchItem(task);\n        }\n\n        switch(true) {\n            case projectPanel === null:\n                if (task === '') {\n                    index = Array.from(parentGroup).indexOf(parent);\n                   let projectIndex = searchProjectItems(project);\n                    // variable that fetches array \n                    let itemArray = itemRef.arrayShare();\n                    \n                    // removes items from both the array, localStorage, and the DOM\n                    taskPrint.removeProject(project);\n                    itemRef.update(action, index, 1);\n                    taskPanel.removeChild(parent);  \n                    // projects.delete(projectIndex); \n                } else if ( task != '' && project === '' ) {\n                    let projectIndex = searchProjectItems(project);\n                    // variable that fetches array \n                    let itemArray = itemRef.arrayShare();\n                   \n\n                    // removes items from both the array, localStorage, and the DOM\n                    taskPrint.removeProject(project);\n                    itemRef.update(action, index, 1);\n                    taskPanel.removeChild(parent);  \n                    // projects.delete(projectIndex); \n                } else if ( task != '' && project != '') {\n                    let projectIndex = searchProjectItems(project, task);\n                    // variable that fetches array \n                    console.log(projectIndex);\n                    let projectItems = JSON.parse(localStorage.getItem('projectArray'));\n                    // removes items from both the array, localStorage, and the DOM\n                    let tasks = projectItems[projectIndex.project].tasks[projectIndex.task];\n                    \n                            \n                            \n                            \n                            projectPrint.delete(projectIndex.project, projectIndex.task);\n                            taskPanel.removeChild(parent);  \n                        \n                    \n                }\n            break;\n            case projectPanel != null:\n                if (project === undefined) {\n                //     let projectItems = JSON.parse(localStorage.getItem('projectArray'));\n\n                let projectIndex = searchProjectItems(project);\n                // variable that fetches array \n                let projectItems = JSON.parse(localStorage.getItem('projectArray'));\n                \n                // removes items from both the array, localStorage, and the DOM\n               \n        \n                //    let projectIndex = searchProjectItems(project);\n                //     // variable that fetches array \n                //     let itemArray = itemRef.arrayShare();\n                    \n                //     // removes items from both the array, localStorage, and the DOM\n                //     taskPrint.removeProject(project);\n                //     itemRef.update(action, index, 1);\n                //     taskPanel.removeChild(parent);  \n                // //     projects.delete(projectIndex); \n                } else if (project != undefined) {\n                    \n                   \n\n                    let projectIndex = searchProjectItems(project, task);\n                    // variable that fetches array \n                    \n                    // removes items from both the array, localStorage, and the DOM\n                    \n                            projectPrint.delete(projectIndex.project, projectIndex.task);\n                            taskPanel.removeChild(parent);  \n                        \n                    \n                }\n        }\n       \n        \n        \n    }\n\n\n\n        /* I think I need to get the index of each item to print upon clicking\n                then I need to send that into itemRef and replace w/e item is edited\n                then call for a storage Push so it updates the item\n         */\n\n    function searchItem(name) {\n\n        const array = JSON.parse(localStorage.getItem('itemArray'));\n\n        for (var i = 0; i < array.length; i++){\n            let index = array[i].task;\n            \n            if (index === name) {\n               \n                return array.indexOf(array[i]);\n            }\n        }\n\n    }\n\n    function searchProjectItems( project, task ) {\n       \n        const array = JSON.parse(localStorage.getItem('projectArray'));\n\n        for (var i = 0; i < array.length; i++) {\n\n            let index = array[i].projectName;\n            let taskArray = array[i].tasks;\n\n            if ( index === project ) {\n\n                for ( var j = 0; j < taskArray.length; j++ ) {\n                    if ( taskArray[j].task === task ) {\n                        //\n                        //\n                        let taskIndex = taskArray.indexOf(taskArray[j]);\n                        let projectIndex = array.indexOf(array[i]);\n                        let newTask = {\n                            task: taskIndex,\n                            project: projectIndex\n                        }\n                        return newTask;\n                    }\n                }\n                \n                \n            }\n        }\n    }\n\n\n    /* \n    **************************** COMPLETE TASK *******************************    \n    */\n\n    // function that grays each task out that is already marked complete\n    function loadComplete(item) {\n        \n        const gray = \"filter: grayscale(1);\";\n        const checkBox = item.children[1];\n        \n        checkBox.classList.remove('completeTask');\n        checkBox.classList.add('checkedTask');\n        item.style.cssText = `${gray}`;\n    } \n\n    // private function that marks task item as completed\n    function _completeTask() {\n        // variables that fetch and assign the cssText for the clicked completeTask button\n        const parent = event.target.parentElement;\n        const project = parent.children[0].textContent;\n        const gray = \"filter: grayscale(1);\";\n        const normal = \"filter: grayscale(0);\";\n        const action = 'complete';\n        \n        // targets specific element interacted with and returns a usable index position\n        const task = parent.children[4].textContent;\n        let index = searchItem(task);\n        let status = 'incomplete';\n        const projectColor = document.querySelector('.projects');\n\n        // switch statement that (based on the cssText of the clicked element) either grays out, or \n        // fills in the taskItem container div\n        switch(true) {\n            case parent.style.cssText === '':\n                event.target.classList.remove('completeTask');\n                event.target.classList.add('checkedTask');\n                parent.style.cssText = `${gray}`;\n                status = 'complete';\n\n                // if the project tab is highlighted, then it updates the project array\n                // else it will update item array\n                if (project != '') {\n                    const projectArrays = JSON.parse(localStorage.getItem('projectArray'));\n\n                    for ( var i = 0; i < projectArrays.length; i++ ) {\n                        if ( projectArrays[i].projectName === project ) {\n                            index = projectArrays.indexOf(projectArrays[i]);\n                            projectPrint.update(action, index, status);\n                        }\n                    }\n                } else {\n\n                    itemRef.update(action, index, status);\n                }\n            break;\n            case parent.style.cssText === \"filter: grayscale(1);\":\n                event.target.classList.remove('checkedTask');\n                event.target.classList.add('completeTask');\n                parent.style.cssText = `${normal}`;\n                status = 'incomplete';\n\n\n                 if (project != '' && index === undefined) {\n                    const projectArrays = JSON.parse(localStorage.getItem('projectArray'));\n\n                    for ( var i = 0; i < projectArrays.length; i++ ) {\n                        if ( projectArrays[i].projectName === project ) {\n                            index = projectArrays.indexOf(projectArrays[i]);\n                           \n                            projectPrint.update(action, index, status);\n                        }\n                    }\n                } else if (project != '') {\n                    index = projectPrint.search(task, project);\n                   \n                    projectPrint.update(action, index, status);\n                } else {\n                    \n                    itemRef.update(action, index, status);\n                }\n                \n            break;\n            case parent.style.cssText === \"filter: grayscale(0);\":\n                event.target.classList.remove('completeTask');\n                event.target.classList.add('checkedTask');\n                parent.style.cssText = `${gray}`;\n                status = 'complete';\n                itemRef.update(action, index, status);\n            break;\n        }\n        completeLocalStorage(parent);\n    }   \n    \n    function completeLocalStorage(parent) {\n\n        // variables for grabbing identification\n       \n        const project = parent.children[0];\n        const name = parent.children[4];\n\n        const keys = Object.keys(localStorage);\n        let i = 0;\n\n        while (i < keys.length) {\n            const items = JSON.parse(localStorage.getItem(keys[i]));\n             if (items.task === name.textContent) {\n                // const oldItems = JSON.parse(localStorage.getItem(keys[i]).key);\n                var key = localStorage.key(i);\n                const newItems = {};\n                newItems.task = items.task;\n                newItems.notes = items.notes;\n                newItems.date = items.date;\n                newItems.project = items.project;\n                newItems.status = 'complete';\n                const newest = JSON.stringify(newItems);\n                localStorage.setItem(key, newest);\n                //  localStorage.setItem(items, `{task:${task}, notes: ${notes}, date: ${date}, ${project}, ${status}}`);\n                 \n             }\n            \n            i++\n        }\n    }\n\n    function parentIndex ( event ) {\n        const taskPanel = document.querySelector('.taskPanel');\n        const parent = event.parentElement;\n\n        switch ( true ) {\n            case parent.children[0].textContent === '':\n               const items = JSON.parse(localStorage.getItem('itemArray'));\n\n                for ( var i = 0; i < items.length; i++ ) {\n                    if ( parent.children[4].textContent === items[i].task ) {\n                        items.indexOf ( item[i] );\n                    }\n                }\n\n            break;\n            case parent.children[0].textContent != '':\n                \n                const projects = JSON.parse(localStorage.getItem('projectArray'));\n\n                for ( var i = 0; i < projects.length; i++ ) {\n                    if ( projects[i].projectName === parent.children[0] ) {\n\n                        const projectTasks = projects.map((a) => a.tasks);\n\n                        for ( var j = 0; j < projectTasks.length; j++ ) {\n                            if ( parent.children[4] === projectTasks[i][j].task) {\n                            }\n                        }\n\n                    }\n                }\n            \n            break;\n        }\n\n        \n    }\n\n    const currentProject = [];\n\n    function _editProject () {\n        // variables that get each nodeList item of the specific container the clicked button is in\n        const parent = event.target.parentElement;\n        const project = parent.children[0].textContent;\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n        const task = parent.children[4].textContent;\n\n        const projectTextArray = document.querySelectorAll('.textSpans');\n\n        for (var i = 0; i < projectTextArray.length; i++) {\n            if (projectTextArray[i].textContent === project.textContent && name.tagName === 'DIV') {\n                \n                newTextArray.push(projectTextArray[i]);\n            } else if (projectTextArray[i].textContent === undefined) {\n            }\n        }\n\n        \n        let newTasks = searchProjectItems( project, task );\n        currentProject.push(newTasks);\n       \n        \n        // variable that fetches array \n        let projectItems = JSON.parse(localStorage.getItem('projectArray'));\n        // removes items from both the array, localStorage, and the DOM\n        \n\n        \n      \n        // IF the edit button is clicked and the task.tagName is still a DIV, then the code runs\n        // ELSE it will run the function called below which appends the newly edited info to the DOM\n        if (name.tagName === 'DIV') {\n            // variables for appending input items to taskItem\n    \n            const editName = document.createElement('input');\n                editName.classList.add('taskName');\n                editName.placeholder = 'Edit Task Name';\n                editName.style.cssText = 'text-align: center;';\n                parent.replaceChild(editName, name);\n    \n    \n            const editDate = document.createElement('input');\n                editDate.classList.add('taskDate');\n                editDate.type = 'date';\n                editDate.style.cssText = \"background-color: White; color: black; text-align: center;\";\n                editDate.placeholder = 'Edit Date';\n                parent.replaceChild(editDate, date)\n    \n    \n    \n            const editDescription = document.createElement('input');\n                editDescription.classList.add('description');\n                editDescription.placeholder = 'Edit Notes';\n                editDescription.style.cssText = 'text-align: center;';\n                parent.replaceChild(editDescription, notes);\n    \n                event.target.classList.remove('editTask');\n                event.target.classList.add('editingTask');\n            // parent.appendChild();\n        } else {\n            \n             _appendProject ( currentProject[0].project, currentProject[0].task );\n\n            currentProject.pop();\n            currentProject.pop();\n        }\n    }\n\n    function _appendProject ( ind, i ) {\n        // variable for grabbing all task items\n        const taskItems = document.querySelectorAll('.taskItem');\n        const tasks = Array.from(taskItems);\n\n        event.target.classList.remove('editingTask');\n        event.target.classList.add('editTask');\n\n        // gets the container of the specific edit button clicked\n        const parent = event.target.parentElement;\n\n        // variables for appending finished items to taskItem\n        const project = parent.children[0].textContent\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n        const defaultProject = '';\n\n        const taskName = document.createElement('div');\n            taskName.classList.add('taskName');\n            taskName.textContent = name.value;\n\n        const description = document.createElement('div');\n            description.classList.add('description');\n            description.textContent = notes.value;\n\n        const taskDate = document.createElement('div');\n            taskDate.classList.add('taskDate');\n            taskDate.textContent = date.value;\n\n            \n            // if(textIndex != undefined ) {\n            //     const projectScroll = document.querySelector('.scrollContainer');\n            //     projectScroll.appendChild(textIndex);\n            //     textIndex.textContent = project.value;\n            //     newTextArray.pop();\n            // } else if (project.value === '') {\n            //     const projectPanel = document.querySelector('.projectPanel');\n            //     if (projectPanel != null) {\n            //         const projectScroll = document.querySelector('.scrollContainer');\n            //         projectScroll.removeChild(textIndex);\n            //        \n            //     }\n            // }\n\n\n        // variable that fetches index of edited element\n        const index = tasks.indexOf(parent);\n\n        if(name.value != '') {\n            \n                parent.replaceChild(taskName, name);\n                parent.replaceChild(taskDate, date);\n                parent.replaceChild(description, notes);\n               \n        } else if (name.value === '') {\n            \n        }\n        \n        \n\n        const newItem = {};\n        newItem.task = name.value;\n        newItem.notes = notes.value;\n        newItem.date = date.value;\n        newItem.project = project;\n        newItem.status = 'incomplete';\n        projects.splice( ind, i, newItem );\n\n        const hovered = document.querySelector('.hovered');\n        _updatePage ( hovered.textContent );\n\n  }\n\n  function _updatePage ( page ) {\n      \n        switch ( true ) {\n            case page === 'Today':\n                tabSelection.today();\n            break;\n\n            case page === 'Weekly':\n                tabSelection.weekly();\n            break;\n\n        }\n  }\n\n    /* \n    **************************** EDIT TASK *******************************    \n    */\n    const taskContainer = [];\n\n    // private function that allows the task info to be edited\n    function _editTask() {\n// ************************IF TASK EXISTS IN EITHER ARRAY AND LOSES THE REASON IT'S IN THAT ARRAY, SWITCH\n// THE ARRAY IT'S CONTAINED IN\n\n        // variables that get each nodeList item of the specific container the clicked button is in\n        const parent = event.target.parentElement;\n        const project = parent.children[0]\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n        const task = parent.children[4].textContent;\n        \n        if (project.textContent != '' ) {\n            _editProject();\n        } else {\n\n            const projectTextArray = document.querySelectorAll('.textSpans');\n            \n\n            for (var i = 0; i < projectTextArray.length; i++) {\n                if (projectTextArray[i].textContent === project.textContent && name.tagName === 'DIV') {\n                    \n                    newTextArray.push(projectTextArray[i]);\n                } else if (projectTextArray[i].textContent === undefined) {\n                }\n            }\n\n            const itemIndex = searchItem(task);\n            taskContainer.push(itemIndex);\n\n            // IF the edit button is clicked and the task.tagName is still a DIV, then the code runs\n            // ELSE it will run the function called below which appends the newly edited info to the DOM\n            if (name.tagName === 'DIV') {\n            // variables for appending input items to taskItem\n\n            const editProject = document.createElement('input');\n                editProject.classList.add('projectName');\n                editProject.style.cssText = 'text-align: center;';\n                editProject.placeholder = 'Edit Project Name';\n                parent.replaceChild(editProject, project);\n\n\n            const editName = document.createElement('input');\n                editName.classList.add('taskName');\n                editName.placeholder = 'Edit Task Name';\n                editName.style.cssText = 'text-align: center;';\n                parent.replaceChild(editName, name);\n\n\n            const editDate = document.createElement('input');\n                editDate.classList.add('taskDate');\n                editDate.type = 'date';\n                editDate.style.cssText = \"background-color: White; color: black; text-align: center;\";\n                editDate.placeholder = 'Edit Date';\n                parent.replaceChild(editDate, date)\n\n\n\n            const editDescription = document.createElement('input');\n                editDescription.classList.add('description');\n                editDescription.placeholder = 'Edit Notes';\n                editDescription.style.cssText = 'text-align: center;';\n                parent.replaceChild(editDescription, notes);\n\n                event.target.classList.remove('editTask');\n                event.target.classList.add('editingTask');\n        // parent.appendChild();\n            \n            } else { \n                    let tempIndex = taskContainer[0];\n                    _appendTask(tempIndex);\n                    taskContainer.pop();\n            }\n        }\n    }\n\n    /* \n    ************************************************************************************\n    **********************************APPEND EACH TASK AFTER EDIT***********************\n    ************************************************************************************\n    */\n\n\n    // function that takes newly edited information and publishes them to the DOM\n    function _appendTask(textIndex, itemIndex) {\n\n        // variable for grabbing all task items\n        const taskItems = document.querySelectorAll('.taskItem');\n        const tasks = Array.from(taskItems);\n\n        event.target.classList.remove('editingTask');\n        event.target.classList.add('editTask');\n\n        // gets the container of the specific edit button clicked\n        const parent = event.target.parentElement;\n\n        // variables for appending finished items to taskItem\n        const project = parent.children[0]\n        const edit = parent.children[3];\n        const name = parent.children[4];\n        const date = parent.children[5];\n        const notes = parent.children[6];\n        const defaultProject = '';\n\n        const taskName = document.createElement('div');\n            taskName.classList.add('taskName');\n            taskName.textContent = name.value;\n\n        const description = document.createElement('div');\n            description.classList.add('description');\n            description.textContent = notes.value;\n\n        const taskDate = document.createElement('div');\n            taskDate.classList.add('taskDate');\n            taskDate.textContent = date.value;\n\n        const projectName = document.createElement('div');\n            projectName.classList.add('projectName');\n            projectName.textContent = project.value;\n\n            \n            if(textIndex != undefined && project.value != '') {\n                const projectScroll = document.querySelector('.scrollContainer');\n                projectScroll.appendChild(textIndex);\n                textIndex.textContent = project.value;\n                newTextArray.pop();\n            } else if (project.value === '') {\n                const projectPanel = document.querySelector('.projectPanel');\n                if (projectPanel != null) {\n                    const projectScroll = document.querySelector('.scrollContainer');\n                    projectScroll.removeChild(textIndex);\n                }\n            }\n\n\n        // variable that fetches index of edited element\n        textIndex\n\n        _checkItemData(event.target, name.value, notes.value, date.value, project.value, status, textIndex)\n\n        if(name.value != '') {\n            \n                parent.replaceChild(projectName, project);\n                parent.replaceChild(taskName, name);\n                parent.replaceChild(taskDate, date);\n                parent.replaceChild(description, notes);\n           \n                projectName.textContent = '';\n            \n           \n        } else if (name.value === '') {\n            \n        }\n\n        const newItem = {};\n        newItem.task = name.value;\n        newItem.notes = notes.value;\n        newItem.date = date.value;\n        newItem.project = projectName.textContent;\n        newItem.status = 'incomplete';\n        \n        // conditional that prints project to scroll container if project name exists\n        if (project.value != '') {\n            alert('Tasks cannot be made into projects.')\n        }\n        \n        itemRef.update('edit', textIndex, newItem);\n        \n        const hovered = document.querySelector('.hovered');\n        _updatePage ( hovered.textContent );\n    }\n\n    \n    // function to confirm there are no repeating task values\n    function _checkItemData(target, taskName, notes, date, project, status, index) {\n\n        const projectPanel = document.querySelector('.projectPanel');\n        // variable for fetching the itemArray inside localStorage and assigning it a variable\n        if ( projectPanel === null ) {\n            const arrays = JSON.parse(localStorage.getItem('itemArray'));\n        } else if ( projectPanel != null ) {\n            const projectS = JSON.parse(localStorage.getItem('projectArray'));\n        }\n\n        const arrays = JSON.parse(localStorage.getItem('itemArray'));\n        // variables that help the switch statement below decide what to do based on if repeat data is found\n        let existing = false;\n        let dataSet = undefined;\n        let projectPrompt = false;\n\n        // loop that runs through each locallyStored item and checks if there are repeated values\n        switch(true) {\n            case arrays === null:     \n            break;\n            \n            case arrays != null:\n            for ( var i = 0; i < arrays.length; i++) {\n                if (arrays[i].task === taskName && arrays[i].task != '') {\n                    existing = true;\n                    dataSet = 'tasks';\n                }\n\n                if (arrays[i].notes === notes && arrays[i].notes != '') {\n                    existing = true;\n                    dataSet = 'notes';\n                }\n\n                if (arrays[i].project === project && arrays[i].project != '') {\n                    existing = true;\n                    dataSet = 'projects';\n                    projectPrompt = true;\n                }\n            }\n        }\n        // if no repeated data, print the task\n            // if there IS repeated data, alert the user, and refuse their task\n        switch(true) {\n            case existing === false && taskName === '':\n                return alert('Tasks cannot be blank!');\n            break;\n\n            case existing === false && taskName != '':\n            if ( projectPanel === null ) {\n                grabEditedTask.newTask(event.target, name.value, notes.value, date.value, project.value, status, index);\n            } else if ( projectPanel != null ) {\n\n            }\n\n\n            break;\n\n            case existing === true:\n                if (projectPrompt === true) {\n                    alert(`If you want to add tasks to your ${dataSet}, click on the 'Projects' tab.`);\n                     alert(`All ${dataSet} must be unique. `);\n                    \n                } else {\n                   \n                    return alert(`All ${dataSet} must be unique. `);\n                }\n            break;\n        }\n\n    }\n\n\n    return {\n    eventListeners: buttonEventListeners,\n    complete: loadComplete,\n\n    }\n\n})();\n\n    /* \n    ************************************************************************************\n    **********************************GRAB EDITED TASK**********************************\n    ************************************************************************************\n    */\n\n    // module that grabs edited task info and communicates that changes were made\n    const grabEditedTask = (function() {\n\n        /* \n            there should be a way to track back to the orignial array in index.js when you edit\n            it'll figure out which index the edited item belongs to, determine if it has a project\n            and rewrite that information. Keeping it's place in the array index, but updating it\n        */\n        // variables that grab specific task that is edited\n\n        function receiveEditedTask(target, task, notes, date, project, status, index) {\n            const editedTask = {};\n            editedTask.name = task,\n            editedTask.notes = notes,\n            editedTask.date = date,\n            editedTask.project = project,\n            editedTask.status = 'incomplete',\n            _updateArrays(editedTask, index)\n\n        }\n\n        function _updateArrays(task, index) {\n            // variable that tells itemRef that the action being taken is 'edit'\n            const edit = 'edit';\n            itemRef.update(edit, index, task)\n        }\n\n        return {\n            newTask: receiveEditedTask\n        }\n    })();\n\n    \n\n    const grabEditedProject = (function () {\n\n        function receiveEditedProject (target, task, notes, date, project, status, index ) {\n            const editedProject = {};\n            editedProject.name = task,\n            editedProject.notes = notes,\n            editedProject.date = date,\n            editedProject.project = project,\n            editedProject.status = 'incomplete',\n            _updateArrays ( task, index )\n        }\n\n        function _updateArrays(task, index) {\n            // variable that tells itemRef that the action being taken is 'edit'\n            const edit = 'edit';\n            projects.update(edit, index, task)\n        }\n\n        return {\n            receiveEditedProject\n        }\n    })()\n\n     /* \n    ************************************************************************************\n    **********************************MODULE FOR DELETING EVERY ITEM********************\n    ************************************************************************************\n    */\n\n    const taskUpdate = (function() {\n\n        // variable that grabs task container & tasks\n        const mainSection = document.querySelector('.mainSection');\n        const taskPanel = document.querySelector('.taskPanel');\n        const allItems = taskPanel.children;\n        // function that erases all tasks from panel\n\n        function eraseTasks() {\n            var child = taskPanel.lastElementChild; \n            while (child) {\n                taskPanel.removeChild(child);\n                child = taskPanel.lastElementChild;\n            }\n\n        }\n\n        // function that deletes each .textSpans element so they don't spam\n        function clearProjectName() {\n\n            // variable that fetches project panel\n            const scrollContainer = document.querySelector('.scrollContainer');\n            var child = document.querySelectorAll('.textSpans');\n\n            for(var i = 0; i < child.length; i++) {\n                scrollContainer.removeChild(child[i]);\n            }\n\n        }\n\n        return {\n            erase: eraseTasks,\n            clear: clearProjectName\n        }\n    })();\n\nexport { editItems, taskUpdate }","import { taskPrint } from \"./printTasks.js\";\nimport { ItemFactory, ProjectFactory } from \"./taskFactory.js\";\nimport { projects } from \"./project.js\";\n/* \n************************************************************************************\n***************** MODULE THAT GRABS INFO FOR TASKS FROM INPUT FIELDS ***************\n************************************************************************************\n*/\n\nconst grabTask = (function() {\n    \n    \n    // upon click will get task  item\n    function toDoInput() { \n        const input = document.querySelector('.task');\n        return input.value;\n    }\n\n    // on click will get notes of todo list item\n    function itemNotes() {\n        const notes = document.querySelector('.notes');\n        return notes.value;\n    }\n\n    // on click will get completion date\n    function itemDate() {\n        const itemDate = document.querySelector('.date');\n        return itemDate.value;\n    }\n\n    function itemProject() {\n        const projectTitle = document.querySelector('.project');   \n        return projectTitle.value;\n    }\n\n    // function to confirm there are no repeating task values\n    function checkItemData(taskName, notes, date, project, status) {\n        \n        // variable for fetching the itemArray inside localStorage and assigning it a variable\n        const arrays = JSON.parse(localStorage.getItem('itemArray'));\n        const projectArray = JSON.parse(localStorage.getItem('projectArray'));\n        // variables that help the switch statement below decide what to do based on if repeat data is found\n        let existing = false;\n        let dataSet = undefined;\n        let projectPrompt = false;\n\n        // loop that runs through each locallyStored item and checks if there are repeated values\n        switch(true) {\n            case arrays === null:     \n            break;\n            \n            case arrays != null:\n            for ( var i = 0; i < arrays.length; i++) {\n                if (arrays[i].task === taskName && arrays[i].task != '') {\n                    existing = true;\n                    dataSet = 'tasks';\n                }\n\n                if (arrays[i].notes === notes && arrays[i].notes != '') {\n                    existing = true;\n                    dataSet = 'notes';\n                }\n\n                if (arrays[i].project === project && project != '') {\n                    existing = true;\n                    dataSet = 'projects';\n                    projectPrompt = true;\n                    const newProject = ProjectFactory();\n                    newProject.receiveProjects(taskName, notes, date, project, status);\n                } else {\n\n                }\n            }\n        }\n        // if no repeated data, print the task\n            // if there IS repeated data, alert the user, and refuse their task\n            \n        switch(true) {\n            case existing === false && taskName === '':\n                return alert('Tasks cannot be blank!');\n            break;\n\n            case existing === false && project != '':\n                \n                const newProject = ProjectFactory();\n                newProject.receiveProjects(taskName, notes, date, project, status);\n            break;\n\n            case existing === false && project === '':\n                if ( taskName != '') {\n                    \n                    const sendGrabbedData = ItemFactory();\n                    sendGrabbedData.receiveTasks(taskName, notes, date, project, status);\n                }\n            break;\n\n            case existing === true:\n                if (projectPrompt === true) {\n                   \n                } else {\n                    \n                    return alert(`All ${dataSet} must be unique. `);\n                }\n            break;\n        }\n       \n    }\n\n    // function that gathers all task data from each form, and pushes to the above function 'checkItemData()'\n    function sendItemData() {\n\n        const input = document.querySelector('.task');\n        const notesInput = document.querySelector('.notes');\n        const dateInput = document.querySelector('.date');\n        const projectTitle = document.querySelector('.project'); \n        \n        const taskName = toDoInput();\n        const notes = itemNotes();\n        const date = itemDate();\n        const project = itemProject();\n        \n        const status = 'incomplete'\n        checkItemData(taskName, notes, date, project, status);\n\n        projectTitle.value = '';\n        dateInput.value = '';\n        input.value = '';\n        notesInput.value = '';\n    }\n\n    return {\n        title: toDoInput,\n        notes: itemNotes,\n        itemDate: itemDate,\n        itemProject: itemProject,\n        check: checkItemData,\n        send: sendItemData\n    }\n})()\n\nexport { grabTask }\n\n","import { ItemFactory } from \"./taskFactory\";\nimport  exampe, { projectPrint }  from \"./updateDOM\";\nimport { grabTask } from \"./grabTask\";\nimport { editItems, taskUpdate } from \"./editTasks\";\nimport { tabbedPrint, taskPrint } from \"./printTasks\";\nimport { sidebarTab } from \"./updateDOM\";\nimport { tabSelection } from \"./updateDOM\";\nimport { fi } from \"date-fns/locale\";\nimport { projects } from \"./project\";\n// This module will be used as the reference interface. It has an array of all todo list items, and \n// functions that break each list item down into its individual peices which can then be accessed as needed\nconst itemRef = (function() {\n\n    // array of each task in the list shared by the factory function that made them\n    const itemArray = [];\n    \n        function fillArray() {\n            // gets stored array from localStorage\n            const fillArray = JSON.parse(localStorage.getItem('itemArray'));\n \n            // keeps itemArray filled with saved values so it doesn't reset on window load\n            switch(true) {\n                case fillArray != null:\n                    for (var i = 0; i < fillArray.length; i++) {\n                        itemArray.push(fillArray[i]);\n                    }\n                break;\n            }\n        }\n\n        // pushes todo item into Item array & other functions inside the itemRef Module\n        function pushItem(item) {\n            // pushes item to array\n            itemArray.push(item);\n            \n            storagePush(item);\n        }\n\n        // pushes each item into localStorage \n        function storagePush(item) {\n\n            // gives index position\n            const index = itemArray.indexOf(item);\n            // stores the itemArray in localStorage\n            const storeArray = JSON.stringify(itemArray);\n            localStorage.setItem('itemArray', storeArray);\n            \n            // variable that contains the obtained reference to the locallyStored 'itemArray'\n            let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n            // console.log(storedArray[index].task);   \n            shareItem(item, index);\n            shareArrayItems(item, index, 'index');\n              \n        }\n\n        function arrayUpdate(action, index, amount) {\n            let storeArray = JSON.stringify(itemArray);\n            \n            switch(true) {\n                case action === 'delete':\n                    itemArray.splice(index, 1);\n                    storeArray = JSON.stringify(itemArray);\n                    localStorage.setItem('itemArray', storeArray);\n                break;\n                case action === 'edit':\n                    \n                  \n                    \n                    itemArray.splice(index, 1, amount);\n                    storeArray = JSON.stringify(itemArray);\n                    localStorage.setItem('itemArray', storeArray);\n                    let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n                    console.log(storedArray);\n                    \n                    \n                    \n                break;\n                case action === 'complete':\n                    if (itemArray[index] === undefined) {\n                        projectPrint.update();\n                    } else {\n                        itemArray[index].status = amount;\n                        storeArray = JSON.stringify(itemArray);\n                        localStorage.setItem('itemArray', storeArray);\n                    }\n                break;\n            }\n        }\n\n        function arrayShare(item) {\n            \n            return itemArray;\n        }\n\n        // shares specific itemArray\n        function shareArrayItems(item, index, page) {\n            tabSelection.receive(item, index, page);\n        }\n\n        function shareItem(item, index) {\n            const tabList = document.querySelector('.sidebar');\n        let selectedTab = ''\n        \n        for ( var i = 0; i < tabList.children.length; i++) {\n            if (tabList.children[i].classList.contains('hovered')) {\n                selectedTab = tabList.children[i].textContent;\n            }\n        }\n\n            if (item.project === '' && selectedTab === 'All Projects') {\n                console.log('item.project === \"\" && selectedTab === \"All Projects\"');\n            } else {\n                \n                taskPrint.receive(item, index);\n            }\n            \n\n        }\n\n    // shares specific item\n    function shareTask(index) {\n        console.log('sharing task');\n        console.log(itemArray[index])\n        return itemArray[index];\n    }\n\n        // shares specific item name\n        function shareName(index) {\n            return itemArray[index].name;\n        }\n\n        // shares specific item notes\n        function shareNote(index) {\n            return itemArray[index].notes;\n        }\n\n        // shares specific item date\n        function shareSummary(index) {\n            return itemArray[index].date;\n        }\n\n        // shows which project the item belongs to\n        function shareProject(index) {\n           return itemArray[index].project;\n        }\n\n        \n\n    return {\n        fillArray, fillArray,\n        printItem : pushItem,\n        arrayShare: arrayShare,\n        title: shareName,\n        notes: shareNote,\n        summary: shareSummary,\n        notes: shareProject,\n        task: shareTask,\n        share: shareArrayItems,\n        shareItem: shareItem, \n        update: arrayUpdate,\n    }\n})();\n\n\n// Module for array manipulation \nconst manipulateTaskArray = (function() {\n    \n\n    function _grabArray() {\n        const itemArray = itemRef.arrayShare();\n        console.log(itemArray);\n        return itemArray;\n       \n    }\n\n    function replaceItem(item, index) {\n        const itemArray = _grabArray();\n        itemArray.splice(index, 1, item);\n        console.log(itemArray);\n    }\n\n    return {\n        replace: replaceItem\n    }\n})();\n\n\n\n// module for creating projects\nconst getProject = (function() {\n\n    function currentProjectArray() {\n        const currentProjectArray = JSON.parse(localStorage.getItem('projectArray'));\n\n        return currentProjectArray;\n    }\n    \n\n    return {\n        array: currentProjectArray,\n    }\n})();\n\n    // keeps all event listeners active\n    const sidebar = document.querySelector('.sidebar');\n        sidebar.addEventListener('click', () => {\n            editItems.eventListeners();\n        });\n\n    const submit = document.querySelector('.submit');\n    submit.addEventListener('click', () => {\n        const projectPanel = document.querySelector('.projectPanel');\n        grabTask.send();\n        projectPrint.reprint();\n        if ( projectPanel != null) {\n            taskPrint.project();\n        } \n\n        \n\n        editItems.eventListeners();\n        \n    });\n\n    window.addEventListener('load', () => {\n        editItems.eventListeners();\n        tabSelection.eventListeners();\n        itemRef.fillArray();\n        projects.update();\n\n    })\n\n\n\n/* \n    I need there to be a way to communicate with\n*/\n\n\nexport { itemRef, getProject, manipulateTaskArray }\n\n\n","\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS INFO TO DOM*****************************\n************************************************************************************\n*/\n\nimport { itemRef, projectCreate } from \".\";\nimport { editItems, taskUpdate } from \"./editTasks\";\nimport { projects } from \"./project\";\nimport { sideBarHighlight, tabSelection } from \"./updateDOM\";\n\n\n// Module that prints each task item to UI\nconst taskPrint = (function() {\n    // variables for task parent\n    const taskPanel = document.querySelector('.taskPanel');\n    let item = document.querySelector('.taskItem');\n\n   \n\n    function receiveLocalStorage(archive) {\n        \n    }\n\n    function receiveItem(item, index) {\n        // calls unpackItem to breakdown each item key\n        unpackItem(item, index);\n    }\n\n    // takes item and breaks it down into each part\n    function unpackItem(item, index, status) {\n\n        const taskInput = document.querySelector('.task');\n        \n                const task = {};\n                task.task = item.task;\n                task.notes = item.notes;\n                task.date = item.date;\n                task.project = item.project;\n                task.status = item.status;\n                printTask(task, task.status, index);\n                   \n    }\n\n    // function that calls each appendChild method in order to create the task\n    function printTask(task, status, index) {\n        const item = document.createElement('div');\n        item.classList.add('taskItem');\n            // appends taskItem container DIV to task item section\n            taskPanel.appendChild(item);\n        \n              // project panel\n        const projectPanel = document.querySelector('.projectPanel');\n\n        switch(true) {\n            case projectPanel === null:\n                _printProjectName(item, task.project);\n                _printButtons(item);\n                _printTaskName(item, task.task);\n                _printTaskDate(item, task.date);\n                _printDescription(item, task.notes);\n                \n                if (status === 'complete') {\n                    \n                    editItems.complete(item);\n                }\n            break;\n            case projectPanel != null:\n                \n                printProjects(task, index, status, item);\n            break;\n        }\n            \n            if (task.project != '') {\n                appendProjectName(task, index, status)\n            }\n        // shareTaskItem(item);\n        // itemRef.share(); // not sure why this was here?\n        // createItemObject(item);\n    }\n\n    function printProjects(task, index, status, items) {\n\n        const item = document.createElement('div');\n        item.classList.add('taskItem');\n            // appends taskItem container DIV to task item section\n        taskPanel.appendChild(item);\n        // variable for fetching each tab element\n        const tabList = document.querySelector('.sidebar');\n        let selectedTab = ''\n        \n        for ( var i = 0; i < tabList.children.length; i++) {\n            if (tabList.children[i].classList.contains('hovered')) {\n                selectedTab = tabList.children[i].textContent;\n            }\n        }\n\n        \n        switch(true) {\n            case selectedTab === 'All Projects' && task.project === '':\n            break;\n\n            case selectedTab === 'All Projects' && task.project != '':\n                if (task.project === '') {\n                    \n                } else if (task.project != '') {\n                    _printProjectName(item, task.project);\n                    _printButtons(item);\n                    _printTaskName(item, task.task);\n                    _printTaskDate(item, task.date);\n                    _printDescription(item, task.notes);\n                    \n                        if (task.status === 'complete') {\n                            editItems.complete(item);\n                        }\n                    \n                }\n                \n                if (status === 'complete') {\n                    editItems.complete(item);\n                }\n            break;\n        }\n        \n        \n    }\n\n    function appendProjectName() {\n\n        const projectPanel = document.querySelector('.projectPanel');\n        taskUpdate.clear()\n        \n        const scrollContainer = document.querySelector('.scrollContainer');\n\n        // gets locallyStored project array\n        let array = JSON.parse(localStorage.getItem('projectArray'));\n        \n        \n\n        \n        if (status != true && array != null) {\n            // const text span\n            let projectNames = array.map((a) => a.projectName);\n            \n            // variable for fetching last array item\n            let last = array.length - 1;\n\n            for (let i = 0; i < projectNames.length; i++) {\n\n                const textSpan = document.createElement('span');\n                textSpan.classList.add('textSpans');\n                textSpan.textContent = projectNames[i];\n                textSpan.title = \"Click to see this project's tasks\";\n                scrollContainer.appendChild(textSpan);\n    \n            }\n           \n        } else if (status === true) {\n            const textSpan = document.querySelectorAll('.textSpans');\n            \n            for(var i = 0; i < textSpan.length; i++) {\n                if (textSpan[i].textContent === '') {\n                    name = task.project;\n                    textSpan[i].textContent = name;\n                   \n                }\n            }\n        }\n        tabSelection.eventListeners();\n        // breaks up task\n        \n    }\n\n    function removeProjectName (project) {\n\n        // variable that gets each scroll project span ele\n        const projectSpan = document.querySelectorAll('.textSpans');\n        const scrollContainer = document.querySelector('.scrollContainer');\n\n        for (var i = 0; i < projectSpan.length; i++) {\n            if (project === projectSpan[i].textContent) {\n                scrollContainer.removeChild(projectSpan[i]);\n            }\n        }\n    }\n\n    // function that specifically prints each clicked project item to projectPanel\n    function projectToPanel(task) {\n\n        // variable that fetches project panel\n        const panel = document.querySelector('.projectPanel');\n\n        panel.textContent = `${task}`;\n\n    }\n\n    \n    \n    \n                // variable for task container\n                // prints the name of the project\n                function _printProjectName(item, project) {\n                    const projectName = document.createElement('div');\n\n                    projectName.classList.add('projectName');\n\n                    projectName.textContent = project;\n                    if(projectName.textContent === '') {\n                        projectName.textContent = '';\n                        item.appendChild(projectName);\n                    } else {\n                        item.appendChild(projectName);\n                    }\n                }\n\n                \n\n                // prints the buttons (delete, complete, edit)\n                function _printButtons(item) {\n\n                    const completeTask = document.createElement('button');\n                    completeTask.classList.add('completeTask');\n                    completeTask.title = \"Complete Task\";\n                    // const completeTaskObject = {};\n                    // completeTaskObject.toggle = false;\n                    // completeTaskObject.object = completeTask;\n\n                    const editTask = document.createElement('button');\n                    editTask.classList.add('editTask');\n                    editTask.title = 'Edit Task'\n\n                    const itemDelete = document.createElement('button');\n                    itemDelete.classList.add('itemDelete');\n                    itemDelete.title = 'Delete Task'\n\n                    item.appendChild(completeTask);\n                    item.appendChild(editTask);\n                    item.appendChild(itemDelete);\n                }\n\n                // prints name of task\n                function _printTaskName(item, task) {\n                    const taskName = document.createElement('div');\n                    taskName.classList.add('taskName');\n\n                    taskName.textContent = task;\n                    item.appendChild(taskName);\n                }\n            \n                // prints task date\n                function _printTaskDate(item, date) {\n                    const taskDate = document.createElement('div');\n                    taskDate.classList.add('taskDate');\n\n                    taskDate.textContent = date;\n                    item.appendChild(taskDate);\n                }\n\n                // prints description / notes for task\n                function _printDescription(item, notes) {\n                    const description = document.createElement('div');\n                    description.classList.add('description');\n\n                    description.textContent = notes;\n                    item.appendChild(description);\n                }\n\n\n    return {\n        localStore: receiveLocalStorage,\n        receive: receiveItem,\n        unpack: unpackItem,\n        print: printTask,\n        project: appendProjectName,\n        pPanel: projectToPanel,\n        removeProject: removeProjectName,\n        projectPrint: printProjects,\n    }\n\n})();\n\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS TAB SPECIFIC CONTENT********************\n************************************************************************************\n*/\n\nconst tabbedPrint = (function() {\n    // breaks down each array sent into it's individual items\n    \n    function arrayUnpack(array) {\n        for (var i = 0; i < array.length; i++) {\n           \n            _arrayItem(array[i]);\n        }\n    }\n\n\n    function _arrayItem(index) {\n        const item = {};\n        item.task = index.task;\n        item.notes = index.notes;\n        item.date = index.date;\n        item.project = index.project;\n        item.status = index.status;\n        taskPrint.unpack(item);\n    }\n\n    return {\n        unpack: arrayUnpack\n    }\n})();\n\n\n/* \n************************************************************************************\n*************************MODULE THAT PRINTS TAB SPECIFIC CONTENT********************\n************************************************************************************\n*/\n\n\n\n\nexport { taskPrint, tabbedPrint }","\n\n/* \n************************************************************************************\n***************** MODULE THAT CONTROLS PROJECT FUNCTIONALITY************************\n************************************************************************************\n*/\n\nimport { taskPrint } from \"./printTasks\";\nimport { projectPrint } from \"./updateDOM\";\n\n// module that stores projects into localStorage\nconst projects = (function() {\n\n    // array that stores each project obj\n    let projectArray = [];\n    const allProjects = JSON.parse(localStorage.getItem('projectArray'));\n    \n    \n\n    \n\n    function arrayShare() {\n        return allProjects;\n    }\n        // on window load this pushes each locally stored project into the projectArray \n        function projectArrayUpdate() {\n            // gets all contents of the project array from localStorage\n\n            if (allProjects != null) {\n                // one by one pushes each project into projectArray\n                for (var i = 0; i < allProjects.length; i++) {\n    \n                    projectArray.push(allProjects[i]);\n                    \n                }\n            }\n        }\n\n\n    function projectUpdate(action, index, amount) {\n        let storeProjectArray = JSON.stringify(projectArray);\n\n\n    }\n\n    // function that adds tasks to locally stored array\n    function addTasks(project, index, task) {\n\n        project.tasks.push(task);\n\n        projectArray.splice(index, 1, project);\n        const locallyStored = JSON.stringify(projectArray);\n        localStorage.setItem('projectArray', locallyStored);\n        \n\n        \n    }\n\n    // function that deletes specified project from localStorage array\n    function deleteProject(index) {\n        projectArray.splice(index, 1);\n\n        const locallyStored = JSON.stringify(projectArray);\n        localStorage.setItem('projectArray', locallyStored);\n    }\n\n    function completeProject(index) {\n       \n        const parent = event.target.parentElement;\n        const project = parent.children[0];\n        const task = parent.children[4];\n\n\n        const allTasks = allProjects.map((a) => a.tasks);\n        \n        \n        const tasks = allTasks.map((a) => a.task);\n        \n        \n        for ( var i = 0; i < allProjects.length; i++) {\n            if (project === allProjects[i].projectName) {\n                \n            } else {\n                \n            }\n        }\n    }\n\n    // test function\n    function convey() {\n        if (allProjects != null) {\n            taskPrint.projectPrint(allProjects);\n            \n        }\n    }\n\n    // receives each project, pushes them into the array and passes them off to be sored\n    function receiveProjects(project) {\n      \n        projectArray.push(project);\n        const index = projectArray.indexOf(project);\n        storeProjects(project, index);\n    }\n\n    // stores each project in localStorage\n    function storeProjects(project, index) {\n        const locallyStored = JSON.stringify(projectArray);\n        localStorage.setItem('projectArray', locallyStored);\n        const stored = JSON.parse(localStorage.getItem('projectArray'));\n        \n    }\n\n       \n    function splice (index, i, newTask) {\n        \n        if (newTask === undefined) {\n            let statusUpdate = projectArray[index].tasks.splice(i, 1);\n            storeProjects(statusUpdate, index);\n            \n        } else if (newTask != undefined ) {\n            \n\n            let statusUpdate = projectArray[index].tasks.splice(i, 1, newTask);\n            storeProjects(statusUpdate, index);\n            \n        }\n        \n        if (projectArray[index].tasks.length === 0) {\n            const projectPanel = document.querySelector('.projectPanel');\n            taskPrint.removeProject(projectArray[index].projectName);\n           let statusUpdate = projectArray.splice(index, 1);\n            storeProjects(statusUpdate, index);\n            if ( projectPanel != null ) {\n                projectPanel.textContent = '';\n            }\n        }\n\n    }\n    \n    return {\n        share: arrayShare,\n        receiving: receiveProjects,\n        update: projectArrayUpdate,\n        add: addTasks,\n        complete: completeProject,\n        convey: convey,\n        delete: deleteProject,\n        splice: splice\n    }\n\n})();\n\n\nexport {projects}"," import { grabTask } from \"./grabTask\"\nimport {getProject, itemRef} from \"./index\"\nimport { projects } from \"./project\"\n\n// Module that turns task data into an object\nconst ItemFactory = () => {\n\n    // receiving function that breaks down each task item and sends it onward\n    function receiveTasks(taskName, notes, date, project, status) {\n        \n        // forms each group of task data into an object \n        const item = {\n           task: taskName,\n           notes: notes,\n           date: date,\n           project: project, \n           status: status\n        }\n\n        _pushItem(item);\n    }\n    // pushes each task into index.js where it is added to the taskArray\n    function _pushItem(item) {\n        if (item.project != '') {\n            const newProject = ProjectFactory();\n            newProject.qualify(item);    \n        } else {\n\n            itemRef.printItem(item);\n        }\n        \n    }\n   \n    return { receiveTasks }\n}\n\n\n\nconst ProjectFactory = () => {\n\n    \n   \n    function qualify (item) {\n        const projectName = item.project;\n        if (projectName != undefined) {\n            _breakDown(item);\n        }\n       \n    }\n\n    function _breakDown(item) {\n        const taskName = item.task;\n        const notes = item.notes;\n        const date = item.date;\n        const project = item.project;\n        const status = item.status;\n        receiveProjects(taskName, notes, date, project, status);\n    }\n\n    function receiveProjects(taskName, notes, date, project, status) {\n\n        // variables for repeat or new projects\n        let repeat = false;\n        let newProject = false;\n        \n        // creates each project that contains each task inside of it\n        const container = {};\n        container.projectName = project;\n        container.tasks = [];\n\n        const task = {};\n        task.task = taskName;\n        task.notes = notes;\n        task.date = date;\n        task.project = project;\n        task.status = status;\n\n        if (getProject.array() != null && getProject.array().length != 0 ) { \n            for (var i = 0; i < getProject.array().length; i++) {\n                if (getProject.array()[i].projectName === project && project != undefined) {\n                    repeat = true; \n                    var projectItem = getProject.array()[i];\n                    var index = [i];\n                } else {\n                    newProject = true;\n\n                }\n            }\n\n            if ( repeat === true && project != '') {\n                projects.add(projectItem, index, task);\n                repeat = false;\n            } else if ( newProject === true ) {\n                container.tasks.push(task);\n                projects.receiving(container);\n                newProject = false;\n            }\n\n        } else if (getProject.array() === null || getProject.array().length === 0 ) {\n            \n            container.tasks.push(task);\n            projects.receiving(container);\n        }\n\n\n\n    }\n\n    return {qualify, receiveProjects}\n}\n\n\n\nexport {ItemFactory, ProjectFactory}\n\n/* \nI may need **************************\n    - something to reference all items in itemArray and check for matching projects\n    - it will grab that matching project and push the new data inside of that project's array\n    - then format it so it can push THAT data on to be printed or used however is needed\n */","import { getProject, itemRef } from \"./index.js\";\nimport { formatDistance, parseISO, subDays } from 'date-fns'\nimport { editItems, taskUpdate } from \"./editTasks.js\";\nimport { taskPrint, tabbedPrint } from \"./printTasks.js\";\nimport { projects } from \"./project.js\";\nimport { fi } from \"date-fns/locale\";\nimport { isToday } from 'date-fns';\nimport { isThisWeek } from 'date-fns';\n/* \n************************************************************************************\n****************************CONTROLS WHICH SIDEBAR IS LIT UP************************\n************************************************************************************\n*/\n\n// module that tracks which sidebar panel is interacted with, and then passes that info on\n// so the data corresponding with that tab can be displayed in the DOM\nconst sideBarHighlight = (function () {\n\n    // variables for targeting each tab\n    const sideBarChildren = document.querySelector('.sidebar').children;\n    // each tab element\n    const child1 = sideBarChildren[0];\n    const child2 = sideBarChildren[1];\n    const child3 = sideBarChildren[2];\n    const child4 = sideBarChildren[3];\n    \n\n    // array to contain sidebar tabs\n    const sideBarArray = [];\n    sideBarArray.push(child1, child2, child3, child4);\n\n    function defaultTab() {\n        const all = document.querySelector('.all');\n        all.classList.add('hovered');\n        operator(0);\n        \n    }\n\n    // function that highlights the tab that is clicked and unhighlights the tabs that aren't\n    function sideBarEventListeners(number) {\n\n        \n\n            // if (number != undefined) {\n            //     child1.classList.remove('hovered');\n            //     child2.classList.remove('hovered');\n            //     child3.classList.remove('hovered');\n            //     child4.classList.remove('hovered');\n            //     child5.classList.remove('hovered');\n            //     // added by 'number'\n            //     child5.classList.add('hovered');\n            //     \n            // } else \n            // gives each tab an event listener\n            if (number === undefined) {\n                sideBarArray.forEach(tab => tab.addEventListener('click', () => {\n                const index = sideBarArray.indexOf(event.target);\n\n                switch (true) {\n                    // If event target contains hovered class, it will remove it, and give the hovered class\n                    // to the default tab 'all'\n                    case event.target.classList.contains('hovered'):\n                        event.target.classList.remove('hovered');\n                        defaultTab();\n                        tabSelection.eventListeners();\n                        break;\n                    // if the event target doesn't contain the hovered class, it will remove it from all other tabs\n                    // and give it to the target\n                    case !event.target.classList.contains('hovered'):\n                        child1.classList.remove('hovered');\n                        child2.classList.remove('hovered');\n                        child3.classList.remove('hovered');\n                        child4.classList.remove('hovered');\n                        \n                        event.target.classList.add('hovered');\n                        operator(index);\n                        tabSelection.eventListeners();\n                        break;\n                    \n                }\n\n                const hover = document.querySelector('.hovered');\n            }))\n        }\n    }\n\n    // shares the array that contains each sidebar element\n    function shareTabs() {\n        return sideBarChildren;\n    }\n\n    return {\n        default: defaultTab,\n        children: sideBarEventListeners,\n        share: shareTabs\n    }\n})();\n\n// function that calls functions in the 'tabSelection' module based on which tab is clicked\nfunction operator(index) {\n    switch (true) {\n        case index === 0:\n            tabSelection.all();\n            // communicates that the selected tab is the 'all' tab'\n            \n            break;\n        case index === 1:\n            tabSelection.today();\n            // communicates that the selected tab is the 'all' tab'\n            \n            break;\n        case index === 2:\n            tabSelection.weekly();\n            // communicates that the selected tab is the 'all' tab'\n            \n            break;\n        case index === 3:\n            tabSelection.projects();\n            // communicates that the selected tab is the 'all' tab'\n            \n            break;\n    }\n}\n\n\n\n/* \n************************************************************************************\n****************************MODULE THAT CONTROLS EACH TAB***************************\n************************************************************************************\n*/\n\n// runs logic for each tab based on which tab is clicked\nconst tabSelection = (function () {\n\n    const projectArray = [];\n    const itemArray = [];\n\n    // listens for which project title is clicked on and prints it to the project tab display\n    function eventListeners() {\n        const textSpans = document.querySelectorAll('.textSpans');\n\n        const textArray = Array.from(textSpans);\n        textArray.forEach(text => text.addEventListener('click', _eventListen));\n    \n    }\n\n    function _eventListen() {\n        const projectPanel = document.querySelector('.projectPanel'); \n        if (projectPanel != null) {\n            projectName();               \n        } else {\n            projectsTab(true);\n            projectName();\n        }\n    }\n\n    function receiveProjects(project) {\n        projectArray.push(project);\n\n    }\n\n    function receiveArrayItems(item, index, page) {\n\n        switch (true) {\n            case page === 'index':\n                itemArray.push(item);\n                break;\n        }\n    }\n    \n\n    function todayTab() {\n\n        // erases tasks from DOM so they don't spam themselves\n        taskUpdate.erase();\n\n        // searches DOM for .taskSpans elements\n        const text = document.querySelectorAll('.taskSpans');\n\n        // clears them if they are found so they don't spam themselves\n        if (text != null) {\n            taskUpdate.clear();\n        } \n\n        // variables that target elements of DOM needed to remove projectPanel\n        const taskPanel = document.querySelector('.taskPanel');\n        const projectPanel = document.querySelector('.projectPanel');\n        const mainSection = document.querySelector('.mainSection');\n        const isPresent = mainSection.contains(projectPanel);\n        \n        // removes projectpanel\n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n        taskUpdate.erase();\n       \n        // variables to retrieve both arrays - project and item\n        const projects = JSON.parse(localStorage.getItem('projectArray'));\n        const items = JSON.parse(localStorage.getItem('itemArray'));\n\n        const projectTasks = projects.map((a) => a.tasks);\n\n        // whatever taks are dated for today show up in the DOM\n        \n        for ( var i = 0; i < items.length; i++ ) {\n            \n            var result = isToday ( parseISO ( items[i].date ), 1 );\n            \n            if ( result ) {\n                taskPrint.print(items[i], items[i].status);\n                \n                taskUpdate.clear();\n            }  \n\n         }\n\n        for ( var i = 0; i < projectTasks.length; i++ ) {\n           for ( var j = 0; j < projectTasks[i].length; j++ ) {\n                var result = isToday(parseISO(projectTasks[i][j].date ), 1)\n\n                if ( result ) {\n                    taskPrint.print(projectTasks[i][j], projectTasks[i][j].status);\n                    taskUpdate.clear();\n                }\n           }\n            \n        }\n       \n    }\n\n\n    function weeklyTab() {\n\n        // erases tasks from DOM so they don't spam themselves\n        taskUpdate.erase();\n\n        // searches DOM for .taskSpans elements\n        const text = document.querySelectorAll('.taskSpans');\n\n        // clears them if they are found so they don't spam themselves\n        if (text != null) {\n            taskUpdate.clear();\n        } \n\n        // variables that target elements of DOM needed to remove projectPanel\n        const taskPanel = document.querySelector('.taskPanel');\n        const projectPanel = document.querySelector('.projectPanel');\n        const mainSection = document.querySelector('.mainSection');\n        const isPresent = mainSection.contains(projectPanel);\n        \n        // removes projectPanel \n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n        \n        taskUpdate.erase();\n        \n        // whatever tasks happen this week show up in the DOM\n         // variables to retrieve both arrays - project and item\n         const projects = JSON.parse(localStorage.getItem('projectArray'));\n         const items = JSON.parse(localStorage.getItem('itemArray'));\n \n         const projectTasks = projects.map((a) => a.tasks);\n        \n         const year = new Date().getFullYear();\n         const month = new Date().getMonth() + 1;\n         const day = new Date().getDate();\n         const today = `${year}, ${month}, ${day}`;\n         \n         // whatever taks are dated for today show up in the DOM\n         \n         for ( var i = 0; i < items.length; i++ ) {\n             \n             var result = isThisWeek ( parseISO ( items[i].date ) );\n             \n             \n             \n             if ( result ) {\n                 taskPrint.print(items[i], items[i].status);\n                 \n                 taskUpdate.clear();\n             }  \n \n          }\n \n         for ( var i = 0; i < projectTasks.length; i++ ) {\n            for ( var j = 0; j < projectTasks[i].length; j++ ) {\n                 var result = isThisWeek ( parseISO ( projectTasks[i][j].date ) )\n \n                 if ( result ) {\n                     taskPrint.print(projectTasks[i][j], projectTasks[i][j].status);\n                     taskUpdate.clear();\n                 }\n            }\n             \n         }\n        \n\n    }\n    \n\n    function projectName() {\n        const projectPanel = document.querySelector('.projectPanel');\n        projectPanel.textContent = event.target.textContent;\n        let currentText = event.target.textContent;\n        eventListeners(currentText);\n        projectPrint.print(currentText);\n    }\n\n    // controls both ways that you can get to the project tab\n            // by clicking on the project tab itself\n            // or, but clicking on a project name in the scroll section\n    function projectsTab(condition) {\n        const projectText = event.target.textContent;\n        if (condition === true) {\n            sideBarHighlight.children(4);\n        } else {}\n        // erases all tasks from prior tabs and all scroll items\n\n        // variables for finding taskSpan elements\n        const text = document.querySelectorAll('.taskSpans');\n        // if taskSpan elements are found, clear the projectScroll element of them\n        if (text != null) {\n            taskUpdate.clear();\n        } \n\n        // variable for targeting the 'mainSection' div && adding a place for chosen project title to go\n        const mainSection = document.querySelector('.mainSection');\n        mainSection.style.cssText = `\n        position: relative;\n        grid-area: \"main\";\n        grid-column: 4/11;\n        grid-row: 1/11;\n        background-color: var(--dark-color);\n        z-index: 5;\n        display: grid;\n        grid-template-columns: repeat(4, 24%);\n        grid-template-rows: repeat(10, 10%);\n        grid-template-areas: \n                \"form form\"\n                \"project project\"\n                \"items items\";\n        width: min(100%, 1200px);\n        `;\n\n        // const targets projectPanel div\n        const projectPanel = document.createElement('div');\n        projectPanel.classList.add('projectPanel');\n\n        // variable that targets taskPanel div\n        const taskPanel = document.querySelector('.taskPanel');\n\n        taskPanel.style.cssText = `grid-row: 5/11`;\n        \n        // appends projectPanel to section\n        mainSection.appendChild(projectPanel);\n        \n        // variable that allows task to print\n        let check = false;\n        \n\n        \n\n        // variable that contains the locallyStored array\n        const projectItems = JSON.parse(localStorage.getItem('projectArray'));\n        // pushes each project item to interface that prints them to DOM\n\n    //     const projectNames = JSON.parse(localStorage.getItem('projectArray'));\n    //    for (var i = 0; i < projectNames.length; i++) {\n    //        taskPrint.print(projectNames[i].projectName);\n    //    }\n\n        if (projectItems != null) {\n\n            const projectNames = projectItems.map((a) => a.tasks);\n        }\n\n        taskUpdate.erase();\n       taskPrint.project();\n\n    }\n\n    // controls logic involved in the selection of the All tab. Prints all tasks and projects\n    function allTab(array) {\n        \n        \n        // erases tasks from DOM so they don't spam themselves\n        taskUpdate.erase();\n\n        // searches DOM for .taskSpans elements\n        const text = document.querySelectorAll('.taskSpans');\n\n        // clears them if they are found so they don't spam themselves\n        if (text != null) {\n            taskUpdate.clear();\n        } \n\n        // const targets projectPanel div\n        const projectPanel = document.querySelector('.projectPanel');\n\n        // variable that targets taskPanel div\n        const taskPanel = document.querySelector('.taskPanel');\n\n        // variable for targeting the 'mainSection' div\n        const mainSection = document.querySelector('.mainSection');\n\n        const isPresent = mainSection.contains(projectPanel);\n        // appends projectPanel to section\n        \n        // if the project panel is present, it's removed\n        if (isPresent === true) {\n            mainSection.removeChild(projectPanel);\n            mainSection.style.cssText = `\n            grid-template-areas: \n            \"form form\"\n            \"items items\";\n            `;\n            \n            taskPanel.style.cssText = `grid-row: 4/11`;\n    \n        } \n\n\n        let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n\n        if (storedArray != null) {\n            for (var i = 0; i < storedArray.length; i++) {\n                \n                if(storedArray[i].project === '') {\n                    taskPrint.unpack(storedArray[i]);\n                    \n                } else {\n                    \n                }\n            }\n        }\n\n\n    }\n\n    \n\n    return {\n        eventListeners: eventListeners,\n        receive: receiveArrayItems,\n        receiveProjects: receiveProjects,\n        today: todayTab,\n        weekly: weeklyTab,\n        projects: projectsTab,\n        all: allTab\n    }\n})();\n\n\nconst projectPrint = (function () {\n\n    const projectArray = JSON.parse(localStorage.getItem('projectArray'));\n    \n    const projectStorage = JSON.parse(localStorage.getItem('projectArray'));\n    \n    // returns each project name\n    if (projectStorage != null) {\n        const taskNames = projectStorage.map((a) => a.projectName);\n    }\n\n    \n\n        function reprintOnSubmit() {\n        const projectPanel = document.querySelector('.projectPanel');\n        \n        if (projectPanel != null && projectPanel.textContent != '') {\n            let projectName = projectPanel.textContent;\n            \n            printTasks(projectName);\n        }\n    }\n\n    // function for printing a selected project's task items \n    function findTasks(project) {\n        \n        taskUpdate.erase();\n        let allProjects = JSON.parse(localStorage.getItem('projectArray'));\n        \n        for (var i = 0; i < allProjects.length; i++) {\n            if (allProjects[i].projectName === project) {\n                let tasks = allProjects[i].tasks;\n                return tasks;\n            }\n        }\n        \n    }\n\n\n    // apply a delete all and reprint all function to submit button\n    function printTasks(project) {\n        let allProjects = JSON.parse(localStorage.getItem('projectArray'));\n        let stick = findTasks(project);\n        \n        for (var i = 0; i < stick.length; i++) {\n            let index = i;\n            taskPrint.projectPrint(stick[i], index);\n        }\n    }\n\n    function pushDeletion(index, i) {\n        \n        \n        projects.splice (index, i);\n                \n    }\n\n    // updates each project task item with each edit\n    function projectArrayUpdate(action, index, amount) {\n        let storeArray = JSON.stringify(projectArray);\n        \n        \n        let projectStorage = JSON.parse(localStorage.getItem('projectArray'));\n\n        switch(true) {\n            case action === 'delete':\n                \n                storeArray = JSON.stringify(projectArray);\n                localStorage.setItem('projectArray', projectArray);\n\n            break;\n            case action === 'edit':\n                let indecie = findTasks(amount);\n                \n\n                \n                const newItem = {};\n                newItem.task = amount.name;\n                newItem.notes = amount.notes;\n                newItem.date = amount.date;\n                newItem.project = amount.project;\n                newItem.status = amount.status;\n\n               \n                projectArray.splice(index, 1, newItem);\n                storeArray = JSON.stringify(projectArray);\n                localStorage.setItem('itemArray', projectArray);\n                let storedArray = JSON.parse(localStorage.getItem('itemArray'));\n                \n\n                \n                \n            break;\n            case action === 'complete':\n                const parent = event.target.parentElement;\n                const taskText = parent.children[4];\n                \n                let completedProject = projectStorage[index].tasks;\n                \n                \n                let position = '';\n                let taskPos = '';\n\n                for ( var i = 0; i < completedProject.length; i++ ) {\n                    if (completedProject[i].task === taskText.textContent) {\n                       position = completedProject[i];\n                       \n                       let newTask = {};\n\n                       newTask.task = position.task,\n                       newTask.notes = position.notes,\n                       newTask.date = position.date,\n                       newTask.project = position.project;\n                       \n                       if (position.status === 'incomplete') {\n                           newTask.status = 'complete';\n                       } else if (position.status === 'complete') {\n                        newTask.status = 'incomplete';\n                       }\n\n\n                       let sharedArray = getProject.array();\n                \n                       let replacement = sharedArray[index].tasks.splice(i, 1, newTask);\n\n                        projects.splice(index, i, newTask);\n                       \n                    }\n                }\n\n                \n\n\n                \n                // for ( var i = 0; i < tasks.length; i++) {\n                //     tasker = tasks[i].map((a) => a.task);\n                    \n                   \n                // }\n                // // projectArray[index].status = amount;\n                // storeArray = JSON.stringify(projectArray);\n                // localStorage.setItem('itemArray', storeArray);\n            break;\n        }\n    }\n\n    function searchItem(task, project) {\n\n        const array = JSON.parse(localStorage.getItem('projectArray'));\n\n        const projectPanel = document.querySelector('.projectPanel');\n        const textSpans = document.querySelectorAll('.textSpans');\n\n        parent = event.target.parentElement;\n        \n        const projectItem = parent.children[0];\n        \n        for ( var i = 0; i < textSpans.length; i++) {\n            if (textSpans[i].textContent === projectItem.textContent) {\n                let index = [i];\n                \n                return index\n            }\n        }\n        \n\n               \n        // switch(true) {\n        //     case projectPanel.textContent === projectItem.textContent:\n        //         for ( var i = 0; i < array.length; i++){\n                    \n\n        //             if (array[i].projectName === projectItem.textContent) {\n        //                let currentProjectName = array[i].projectName;\n        //                 for (var i = 0; i < currentProjectName.length; i++) {\n                            \n        //                     if (taskMap[i].task === taskItem.textContent) {\n        //                         \n        //                     }\n        //                 }\n        //             }\n        //         }\n        //     break;\n        // }\n        // for (var i = 0; i < currentTask.length; i++) {\n        //     if (currentProject.tasks[i] === task) {\n        //         currentTask = currentProject.tasks[i];\n        //         currentTask.indexOf(task);\n        //     }\n        // }\n\n        // \n        // \n\n    }\n    \n    return {\n        tasks: findTasks,\n        print: printTasks,\n        update: projectArrayUpdate,\n        search: searchItem,\n        reprint: reprintOnSubmit,\n        delete: pushDeletion\n    }\n\n})();\n\nwindow.addEventListener('load', () => {\n\n    sideBarHighlight.default();\n    sideBarHighlight.children();\n});\n\n\nexport { sideBarHighlight, tabSelection, projectPrint }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}